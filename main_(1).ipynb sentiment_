{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/smithamsgowda/python.ml/blob/main/main_(1).ipynb%20sentiment_\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "WdhRjXOXMtFb"
      },
      "outputs": [],
      "source": [
        "import re\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import string\n",
        "import nltk\n",
        "import warnings\n",
        "warnings.filterwarnings(\"ignore\", category = DeprecationWarning)\n",
        "\n",
        "%matplotlib inline"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "2AawiWTjMtFd"
      },
      "outputs": [],
      "source": [
        "train = pd.read_csv('https://raw.githubusercontent.com/dD2405/Twitter_Sentiment_Analysis/master/train.csv')\n",
        "\n",
        "train_orignal = train.copy()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "X6nz_rEoMtFe",
        "outputId": "9e407acb-5957-47db-f77a-635bd25e5d8a"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   id  label                                              tweet\n",
              "0   1      0   @user when a father is dysfunctional and is s...\n",
              "1   2      0  @user @user thanks for #lyft credit i can't us...\n",
              "2   3      0                                bihday your majesty\n",
              "3   4      0  #model   i love u take with u all the time in ...\n",
              "4   5      0             factsguide: society now    #motivation"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f523c90e-836c-4dfe-a352-2a33b99535c3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>label</th>\n",
              "      <th>tweet</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>@user when a father is dysfunctional and is s...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>@user @user thanks for #lyft credit i can't us...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>bihday your majesty</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>#model   i love u take with u all the time in ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>factsguide: society now    #motivation</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f523c90e-836c-4dfe-a352-2a33b99535c3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f523c90e-836c-4dfe-a352-2a33b99535c3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f523c90e-836c-4dfe-a352-2a33b99535c3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9b5a94d4-2d96-4424-a1ce-f51ff4699486\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9b5a94d4-2d96-4424-a1ce-f51ff4699486')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9b5a94d4-2d96-4424-a1ce-f51ff4699486 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ],
      "source": [
        "train.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "ywuhPxsdMtFh",
        "outputId": "f48935f6-4cd2-441f-9680-6f75727cc856"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          id  label                                              tweet\n",
              "31957  31958      0  ate @user isz that youuu?ðððððð...\n",
              "31958  31959      0    to see nina turner on the airwaves trying to...\n",
              "31959  31960      0  listening to sad songs on a monday morning otw...\n",
              "31960  31961      1  @user #sikh #temple vandalised in in #calgary,...\n",
              "31961  31962      0                   thank you @user for you follow  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2522c64b-0213-42a7-ab1c-6d0fb0bda2ba\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>label</th>\n",
              "      <th>tweet</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>31957</th>\n",
              "      <td>31958</td>\n",
              "      <td>0</td>\n",
              "      <td>ate @user isz that youuu?ðððððð...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31958</th>\n",
              "      <td>31959</td>\n",
              "      <td>0</td>\n",
              "      <td>to see nina turner on the airwaves trying to...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31959</th>\n",
              "      <td>31960</td>\n",
              "      <td>0</td>\n",
              "      <td>listening to sad songs on a monday morning otw...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31960</th>\n",
              "      <td>31961</td>\n",
              "      <td>1</td>\n",
              "      <td>@user #sikh #temple vandalised in in #calgary,...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31961</th>\n",
              "      <td>31962</td>\n",
              "      <td>0</td>\n",
              "      <td>thank you @user for you follow</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2522c64b-0213-42a7-ab1c-6d0fb0bda2ba')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2522c64b-0213-42a7-ab1c-6d0fb0bda2ba button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2522c64b-0213-42a7-ab1c-6d0fb0bda2ba');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d4a4780c-7f8c-4ac5-80da-a43d079536ec\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d4a4780c-7f8c-4ac5-80da-a43d079536ec')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d4a4780c-7f8c-4ac5-80da-a43d079536ec button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ],
      "source": [
        "train.tail()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "Ou-hTNrCMtFj"
      },
      "outputs": [],
      "source": [
        "test = pd.read_csv('https://raw.githubusercontent.com/dD2405/Twitter_Sentiment_Analysis/master/test.csv')\n",
        "\n",
        "test_original = test.copy()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "w8B71xDVMtFk"
      },
      "source": [
        "#### Overview of the test data:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "FhhdW99tMtFk",
        "outputId": "0d83d06b-16b1-4162-b5a6-aca22dd8f31f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      id                                              tweet\n",
              "0  31963  #studiolife #aislife #requires #passion #dedic...\n",
              "1  31964   @user #white #supremacists want everyone to s...\n",
              "2  31965  safe ways to heal your #acne!!    #altwaystohe...\n",
              "3  31966  is the hp and the cursed child book up for res...\n",
              "4  31967    3rd #bihday to my amazing, hilarious #nephew..."
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4bab094b-fb72-4269-afc8-03285e46d475\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>tweet</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>31963</td>\n",
              "      <td>#studiolife #aislife #requires #passion #dedic...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>31964</td>\n",
              "      <td>@user #white #supremacists want everyone to s...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>31965</td>\n",
              "      <td>safe ways to heal your #acne!!    #altwaystohe...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>31966</td>\n",
              "      <td>is the hp and the cursed child book up for res...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>31967</td>\n",
              "      <td>3rd #bihday to my amazing, hilarious #nephew...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4bab094b-fb72-4269-afc8-03285e46d475')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4bab094b-fb72-4269-afc8-03285e46d475 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4bab094b-fb72-4269-afc8-03285e46d475');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3fc6dd5f-4811-46be-883b-0b41ae32bd49\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3fc6dd5f-4811-46be-883b-0b41ae32bd49')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3fc6dd5f-4811-46be-883b-0b41ae32bd49 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "test.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "id": "VitU8Hn9MtFk",
        "outputId": "8365a935-630b-471a-da09-f9834b6407a7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          id                                              tweet\n",
              "17192  49155  thought factory: left-right polarisation! #tru...\n",
              "17193  49156  feeling like a mermaid ð #hairflip #neverre...\n",
              "17194  49157  #hillary #campaigned today in #ohio((omg)) &am...\n",
              "17195  49158  happy, at work conference: right mindset leads...\n",
              "17196  49159  my   song \"so glad\" free download!  #shoegaze ..."
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-63b66344-1264-4384-bf23-0f10504a8b37\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>tweet</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>17192</th>\n",
              "      <td>49155</td>\n",
              "      <td>thought factory: left-right polarisation! #tru...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17193</th>\n",
              "      <td>49156</td>\n",
              "      <td>feeling like a mermaid ð #hairflip #neverre...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17194</th>\n",
              "      <td>49157</td>\n",
              "      <td>#hillary #campaigned today in #ohio((omg)) &amp;am...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17195</th>\n",
              "      <td>49158</td>\n",
              "      <td>happy, at work conference: right mindset leads...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17196</th>\n",
              "      <td>49159</td>\n",
              "      <td>my   song \"so glad\" free download!  #shoegaze ...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-63b66344-1264-4384-bf23-0f10504a8b37')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-63b66344-1264-4384-bf23-0f10504a8b37 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-63b66344-1264-4384-bf23-0f10504a8b37');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-aa09faa0-fff6-47f0-a6a6-d8c95965d78a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-aa09faa0-fff6-47f0-a6a6-d8c95965d78a')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-aa09faa0-fff6-47f0-a6a6-d8c95965d78a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ],
      "source": [
        "test.tail()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OD6yvm9tMtFl"
      },
      "source": [
        "## Data Pre-processing"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "r2R56HafMtFl"
      },
      "source": [
        "#### Combining the datasets"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "id": "8AYpFK91MtFl",
        "outputId": "b87e1e64-1e5f-48d2-dd26-c9ab9a983513",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 241
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-8-7fd2d82a8615>:1: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  combined_data = train.append(test,ignore_index=True,sort=True)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   id  label                                              tweet\n",
              "0   1    0.0   @user when a father is dysfunctional and is s...\n",
              "1   2    0.0  @user @user thanks for #lyft credit i can't us...\n",
              "2   3    0.0                                bihday your majesty\n",
              "3   4    0.0  #model   i love u take with u all the time in ...\n",
              "4   5    0.0             factsguide: society now    #motivation"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8bc8a6dc-c8de-4d77-9038-bf55dabdb79a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>label</th>\n",
              "      <th>tweet</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>@user when a father is dysfunctional and is s...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>0.0</td>\n",
              "      <td>@user @user thanks for #lyft credit i can't us...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>0.0</td>\n",
              "      <td>bihday your majesty</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>0.0</td>\n",
              "      <td>#model   i love u take with u all the time in ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0.0</td>\n",
              "      <td>factsguide: society now    #motivation</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8bc8a6dc-c8de-4d77-9038-bf55dabdb79a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8bc8a6dc-c8de-4d77-9038-bf55dabdb79a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8bc8a6dc-c8de-4d77-9038-bf55dabdb79a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-643ab885-51b0-4b18-a03b-c3d92f5c064b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-643ab885-51b0-4b18-a03b-c3d92f5c064b')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-643ab885-51b0-4b18-a03b-c3d92f5c064b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ],
      "source": [
        "combined_data = train.append(test,ignore_index=True,sort=True)\n",
        "combined_data.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "id": "g-mIKw6ZMtFl",
        "outputId": "44b4f80b-5197-42b5-afff-2c36a2f576d3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          id  label                                              tweet\n",
              "49154  49155    NaN  thought factory: left-right polarisation! #tru...\n",
              "49155  49156    NaN  feeling like a mermaid ð #hairflip #neverre...\n",
              "49156  49157    NaN  #hillary #campaigned today in #ohio((omg)) &am...\n",
              "49157  49158    NaN  happy, at work conference: right mindset leads...\n",
              "49158  49159    NaN  my   song \"so glad\" free download!  #shoegaze ..."
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d3358506-e0ff-4571-addc-a4b54dc69d93\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>label</th>\n",
              "      <th>tweet</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>49154</th>\n",
              "      <td>49155</td>\n",
              "      <td>NaN</td>\n",
              "      <td>thought factory: left-right polarisation! #tru...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49155</th>\n",
              "      <td>49156</td>\n",
              "      <td>NaN</td>\n",
              "      <td>feeling like a mermaid ð #hairflip #neverre...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49156</th>\n",
              "      <td>49157</td>\n",
              "      <td>NaN</td>\n",
              "      <td>#hillary #campaigned today in #ohio((omg)) &amp;am...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49157</th>\n",
              "      <td>49158</td>\n",
              "      <td>NaN</td>\n",
              "      <td>happy, at work conference: right mindset leads...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49158</th>\n",
              "      <td>49159</td>\n",
              "      <td>NaN</td>\n",
              "      <td>my   song \"so glad\" free download!  #shoegaze ...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d3358506-e0ff-4571-addc-a4b54dc69d93')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d3358506-e0ff-4571-addc-a4b54dc69d93 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d3358506-e0ff-4571-addc-a4b54dc69d93');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-eeb94e3e-5d81-4dd2-a637-2b692c62e68a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-eeb94e3e-5d81-4dd2-a637-2b692c62e68a')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-eeb94e3e-5d81-4dd2-a637-2b692c62e68a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ],
      "source": [
        "combined_data.tail()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oexa2xIYMtFm"
      },
      "source": [
        "#### Cleaning Data:\n",
        "Removing the Usernames`(@)`"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "id": "zS5nam30MtFm"
      },
      "outputs": [],
      "source": [
        "def remove_pattern(text,pattern):\n",
        "\n",
        "    # re.findall() finds the pattern in the text and will put it in a list\n",
        "    r = re.findall(pattern,text)\n",
        "\n",
        "    # re.sub() will substitute all the @ with an empty character\n",
        "    for i in r:\n",
        "        text = re.sub(i,\"\",text)\n",
        "\n",
        "    return text"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "id": "FR_mcI2hMtFn",
        "outputId": "fd885e62-fad8-43df-f457-5d5122dad8b7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   id  label                                              tweet  \\\n",
              "0   1    0.0   @user when a father is dysfunctional and is s...   \n",
              "1   2    0.0  @user @user thanks for #lyft credit i can't us...   \n",
              "2   3    0.0                                bihday your majesty   \n",
              "3   4    0.0  #model   i love u take with u all the time in ...   \n",
              "4   5    0.0             factsguide: society now    #motivation   \n",
              "\n",
              "                                      Cleaned_Tweets  \n",
              "0    when a father is dysfunctional and is so sel...  \n",
              "1    thanks for #lyft credit i can't use cause th...  \n",
              "2                                bihday your majesty  \n",
              "3  #model   i love u take with u all the time in ...  \n",
              "4             factsguide: society now    #motivation  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3e21c431-70fe-4b23-a382-2c4090b548a2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>label</th>\n",
              "      <th>tweet</th>\n",
              "      <th>Cleaned_Tweets</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>@user when a father is dysfunctional and is s...</td>\n",
              "      <td>when a father is dysfunctional and is so sel...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>0.0</td>\n",
              "      <td>@user @user thanks for #lyft credit i can't us...</td>\n",
              "      <td>thanks for #lyft credit i can't use cause th...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>0.0</td>\n",
              "      <td>bihday your majesty</td>\n",
              "      <td>bihday your majesty</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>0.0</td>\n",
              "      <td>#model   i love u take with u all the time in ...</td>\n",
              "      <td>#model   i love u take with u all the time in ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0.0</td>\n",
              "      <td>factsguide: society now    #motivation</td>\n",
              "      <td>factsguide: society now    #motivation</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3e21c431-70fe-4b23-a382-2c4090b548a2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3e21c431-70fe-4b23-a382-2c4090b548a2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3e21c431-70fe-4b23-a382-2c4090b548a2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-309401b3-8cd3-4cbb-afd9-45c41bfdf2a7\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-309401b3-8cd3-4cbb-afd9-45c41bfdf2a7')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-309401b3-8cd3-4cbb-afd9-45c41bfdf2a7 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ],
      "source": [
        "combined_data['Cleaned_Tweets'] = np.vectorize(remove_pattern)(combined_data['tweet'],\"@[\\w]*\")\n",
        "\n",
        "combined_data.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_kOCAgbXMtFn"
      },
      "source": [
        "#### Now Removing punctuations, numbers and special characters\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "id": "plT_YAI1MtFn",
        "outputId": "fd29783c-9339-4b9e-dad8-0f7a74c0024a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 241
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-12-115a6746495c>:1: FutureWarning: The default value of regex will change from True to False in a future version.\n",
            "  combined_data['Cleaned_Tweets'] = combined_data['Cleaned_Tweets'].str.replace(\"[^a-zA-Z#]\",\" \")\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   id  label                                              tweet  \\\n",
              "0   1    0.0   @user when a father is dysfunctional and is s...   \n",
              "1   2    0.0  @user @user thanks for #lyft credit i can't us...   \n",
              "2   3    0.0                                bihday your majesty   \n",
              "3   4    0.0  #model   i love u take with u all the time in ...   \n",
              "4   5    0.0             factsguide: society now    #motivation   \n",
              "\n",
              "                                      Cleaned_Tweets  \n",
              "0    when a father is dysfunctional and is so sel...  \n",
              "1    thanks for #lyft credit i can t use cause th...  \n",
              "2                                bihday your majesty  \n",
              "3  #model   i love u take with u all the time in ...  \n",
              "4             factsguide  society now    #motivation  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e4e9adcd-819e-4a08-bdff-f9b721b140c9\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>label</th>\n",
              "      <th>tweet</th>\n",
              "      <th>Cleaned_Tweets</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>@user when a father is dysfunctional and is s...</td>\n",
              "      <td>when a father is dysfunctional and is so sel...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>0.0</td>\n",
              "      <td>@user @user thanks for #lyft credit i can't us...</td>\n",
              "      <td>thanks for #lyft credit i can t use cause th...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>0.0</td>\n",
              "      <td>bihday your majesty</td>\n",
              "      <td>bihday your majesty</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>0.0</td>\n",
              "      <td>#model   i love u take with u all the time in ...</td>\n",
              "      <td>#model   i love u take with u all the time in ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0.0</td>\n",
              "      <td>factsguide: society now    #motivation</td>\n",
              "      <td>factsguide  society now    #motivation</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e4e9adcd-819e-4a08-bdff-f9b721b140c9')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e4e9adcd-819e-4a08-bdff-f9b721b140c9 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e4e9adcd-819e-4a08-bdff-f9b721b140c9');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b9939cf4-f122-486a-b9cf-36f2dcf8e5ac\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b9939cf4-f122-486a-b9cf-36f2dcf8e5ac')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b9939cf4-f122-486a-b9cf-36f2dcf8e5ac button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ],
      "source": [
        "combined_data['Cleaned_Tweets'] = combined_data['Cleaned_Tweets'].str.replace(\"[^a-zA-Z#]\",\" \")\n",
        "\n",
        "combined_data.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "id": "hgJ6dd_bMtFo",
        "outputId": "4c2a0f02-707c-4cfc-d9d1-7d033c0329de",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   id  label                                              tweet  \\\n",
              "0   1    0.0   @user when a father is dysfunctional and is s...   \n",
              "1   2    0.0  @user @user thanks for #lyft credit i can't us...   \n",
              "2   3    0.0                                bihday your majesty   \n",
              "3   4    0.0  #model   i love u take with u all the time in ...   \n",
              "4   5    0.0             factsguide: society now    #motivation   \n",
              "\n",
              "                                      Cleaned_Tweets  \n",
              "0  when father dysfunctional selfish drags kids i...  \n",
              "1  thanks #lyft credit cause they offer wheelchai...  \n",
              "2                                bihday your majesty  \n",
              "3                         #model love take with time  \n",
              "4                     factsguide society #motivation  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-76bcbf9d-96ea-482b-a6de-b78950e065b8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>label</th>\n",
              "      <th>tweet</th>\n",
              "      <th>Cleaned_Tweets</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>@user when a father is dysfunctional and is s...</td>\n",
              "      <td>when father dysfunctional selfish drags kids i...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>0.0</td>\n",
              "      <td>@user @user thanks for #lyft credit i can't us...</td>\n",
              "      <td>thanks #lyft credit cause they offer wheelchai...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>0.0</td>\n",
              "      <td>bihday your majesty</td>\n",
              "      <td>bihday your majesty</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>0.0</td>\n",
              "      <td>#model   i love u take with u all the time in ...</td>\n",
              "      <td>#model love take with time</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0.0</td>\n",
              "      <td>factsguide: society now    #motivation</td>\n",
              "      <td>factsguide society #motivation</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-76bcbf9d-96ea-482b-a6de-b78950e065b8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-76bcbf9d-96ea-482b-a6de-b78950e065b8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-76bcbf9d-96ea-482b-a6de-b78950e065b8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1ceab221-a50e-414c-b0b2-9058398acb98\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1ceab221-a50e-414c-b0b2-9058398acb98')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1ceab221-a50e-414c-b0b2-9058398acb98 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ],
      "source": [
        "combined_data['Cleaned_Tweets'] = combined_data['Cleaned_Tweets'].apply(lambda x: ' '.join([w for w in x.split() if len(w)>3]))\n",
        "\n",
        "combined_data.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "id": "CjHSbGrgMtFo",
        "outputId": "5034d459-f3e3-4b14-c5bb-2dd946ad55fc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    [when, father, dysfunctional, selfish, drags, ...\n",
              "1    [thanks, #lyft, credit, cause, they, offer, wh...\n",
              "2                              [bihday, your, majesty]\n",
              "3                     [#model, love, take, with, time]\n",
              "4                   [factsguide, society, #motivation]\n",
              "Name: Cleaned_Tweets, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ],
      "source": [
        "tokenized_tweets = combined_data['Cleaned_Tweets'].apply(lambda x: x.split())\n",
        "\n",
        "tokenized_tweets.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "id": "zxg27_huMtFp",
        "outputId": "334e726a-3bf9-4703-fc63-bfc8b8c74218",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    [when, father, dysfunct, selfish, drag, kid, i...\n",
              "1    [thank, #lyft, credit, caus, they, offer, whee...\n",
              "2                              [bihday, your, majesti]\n",
              "3                     [#model, love, take, with, time]\n",
              "4                         [factsguid, societi, #motiv]\n",
              "Name: Cleaned_Tweets, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ],
      "source": [
        "from nltk import PorterStemmer\n",
        "\n",
        "ps = PorterStemmer()\n",
        "\n",
        "tokenized_tweets = tokenized_tweets.apply(lambda x: [ps.stem(i) for i in x])\n",
        "\n",
        "tokenized_tweets.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "k0wr1gwuMtFp"
      },
      "source": [
        "#### Now lets combine the data back:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "id": "A4Np2ceSMtFp",
        "outputId": "218ac51c-9a3a-4bfe-f335-0f67ec599f5a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   id  label                                              tweet  \\\n",
              "0   1    0.0   @user when a father is dysfunctional and is s...   \n",
              "1   2    0.0  @user @user thanks for #lyft credit i can't us...   \n",
              "2   3    0.0                                bihday your majesty   \n",
              "3   4    0.0  #model   i love u take with u all the time in ...   \n",
              "4   5    0.0             factsguide: society now    #motivation   \n",
              "\n",
              "                                      Cleaned_Tweets  \\\n",
              "0  when father dysfunctional selfish drags kids i...   \n",
              "1  thanks #lyft credit cause they offer wheelchai...   \n",
              "2                                bihday your majesty   \n",
              "3                         #model love take with time   \n",
              "4                     factsguide society #motivation   \n",
              "\n",
              "                                        Clean_Tweets  \n",
              "0  when father dysfunct selfish drag kid into dys...  \n",
              "1  thank #lyft credit caus they offer wheelchair ...  \n",
              "2                                bihday your majesti  \n",
              "3                         #model love take with time  \n",
              "4                           factsguid societi #motiv  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0c07c141-4186-4ca8-a244-d2ec300a5bf5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>label</th>\n",
              "      <th>tweet</th>\n",
              "      <th>Cleaned_Tweets</th>\n",
              "      <th>Clean_Tweets</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>@user when a father is dysfunctional and is s...</td>\n",
              "      <td>when father dysfunctional selfish drags kids i...</td>\n",
              "      <td>when father dysfunct selfish drag kid into dys...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>0.0</td>\n",
              "      <td>@user @user thanks for #lyft credit i can't us...</td>\n",
              "      <td>thanks #lyft credit cause they offer wheelchai...</td>\n",
              "      <td>thank #lyft credit caus they offer wheelchair ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>0.0</td>\n",
              "      <td>bihday your majesty</td>\n",
              "      <td>bihday your majesty</td>\n",
              "      <td>bihday your majesti</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>0.0</td>\n",
              "      <td>#model   i love u take with u all the time in ...</td>\n",
              "      <td>#model love take with time</td>\n",
              "      <td>#model love take with time</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0.0</td>\n",
              "      <td>factsguide: society now    #motivation</td>\n",
              "      <td>factsguide society #motivation</td>\n",
              "      <td>factsguid societi #motiv</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0c07c141-4186-4ca8-a244-d2ec300a5bf5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0c07c141-4186-4ca8-a244-d2ec300a5bf5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0c07c141-4186-4ca8-a244-d2ec300a5bf5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-48cf3517-6381-4c87-92fe-4a8d10f0ef48\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-48cf3517-6381-4c87-92fe-4a8d10f0ef48')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-48cf3517-6381-4c87-92fe-4a8d10f0ef48 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ],
      "source": [
        "for i in range(len(tokenized_tweets)):\n",
        "    tokenized_tweets[i] = ' '.join(tokenized_tweets[i])\n",
        "\n",
        "combined_data['Clean_Tweets'] = tokenized_tweets\n",
        "combined_data.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jur-uM_pMtFq"
      },
      "source": [
        "### Data Visualization:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "id": "yEbYIIspMtFq"
      },
      "outputs": [],
      "source": [
        "from wordcloud import WordCloud,ImageColorGenerator\n",
        "from PIL import Image\n",
        "import urllib\n",
        "import requests"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2HH2tbnvMtFq"
      },
      "source": [
        "#### Storing all the non-sexist/racist words"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "id": "l1MQDPcXMtFq"
      },
      "outputs": [],
      "source": [
        "positive_words = ' '.join(text for text in combined_data['Cleaned_Tweets'][combined_data['label'] == 0])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "id": "MtA65XE5MtFr"
      },
      "outputs": [],
      "source": [
        "# Generating images\n",
        "Mask = np.array(Image.open(requests.get('http://clipart-library.com/image_gallery2/Twitter-PNG-Image.png', stream=True).raw))\n",
        "\n",
        "# We will use the ImageColorGenerator to generate the color of the image\n",
        "image_color = ImageColorGenerator(Mask)\n",
        "\n",
        "# Now we will use the WordCloud function of the wordcloud library\n",
        "wc = WordCloud(background_color='black',height=1500,width=4000,mask=Mask).generate(positive_words)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "id": "tm2rmqplMtFr",
        "outputId": "e39ec3e9-a774-4c4c-fc7c-f5158fc537aa",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 667
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x2000 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Size of the image generated\n",
        "plt.figure(figsize=(10,20))\n",
        "\n",
        "# Here we recolor the words from the dataset to the image's color\n",
        "# interpolation is used to smooth the image generated\n",
        "\n",
        "plt.imshow(wc.recolor(color_func=image_color),interpolation=\"hamming\")\n",
        "\n",
        "plt.axis('off')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "id": "gPHInglWMtFt"
      },
      "outputs": [],
      "source": [
        "negative_words = ' '.join(text for text in combined_data['Clean_Tweets'][combined_data['label'] == 1])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "id": "yjhVJGJlMtFu"
      },
      "outputs": [],
      "source": [
        "# Combining Image with Dataset\n",
        "Mask = np.array(Image.open(requests.get('http://clipart-library.com/image_gallery2/Twitter-PNG-Image.png', stream=True).raw))\n",
        "\n",
        "image_colors = ImageColorGenerator(Mask)\n",
        "\n",
        "# Now we use the WordCloud function from the wordcloud library\n",
        "wc = WordCloud(background_color='black', height=1500, width=4000,mask=Mask).generate(negative_words)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "id": "rK7PI9ssMtFu",
        "outputId": "5f73655b-89bd-4718-c733-d293cf21a12d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 667
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x2000 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Size of the image generated\n",
        "plt.figure(figsize=(10,20))\n",
        "\n",
        "# Here we recolor the words from the dataset to the image's color\n",
        "# recolor just recolors the default colors to the image's blue color\n",
        "# interpolation is used to smooth the image generated\n",
        "plt.imshow(wc.recolor(color_func=image_colors),interpolation=\"gaussian\")\n",
        "\n",
        "plt.axis('off')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JyOJykhiMtFv"
      },
      "source": [
        "#### Now Extracting hastags from tweets:\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {
        "id": "Ls3kzWvnMtFv"
      },
      "outputs": [],
      "source": [
        "def extractHashtags(x):\n",
        "    hashtags = []\n",
        "\n",
        "    # Loop over the words in the tweet\n",
        "    for i in x:\n",
        "        ht = re.findall(r'#(\\w+)',i)\n",
        "        hashtags.append(ht)\n",
        "\n",
        "    return hashtags"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {
        "scrolled": true,
        "id": "iLsjun0OMtFv",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "86e81a01-e6ac-46df-853d-8890a3e7cd0f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[['run'],\n",
              " ['lyft', 'disapointed', 'getthanked'],\n",
              " [],\n",
              " ['model'],\n",
              " ['motivation'],\n",
              " ['allshowandnogo'],\n",
              " [],\n",
              " ['school',\n",
              "  'exams',\n",
              "  'hate',\n",
              "  'imagine',\n",
              "  'actorslife',\n",
              "  'revolutionschool',\n",
              "  'girl'],\n",
              " ['allin', 'cavs', 'champions', 'cleveland', 'clevelandcavaliers'],\n",
              " [],\n",
              " ['ireland', 'blog', 'silver', 'gold', 'forex'],\n",
              " ['orlando',\n",
              "  'standwithorlando',\n",
              "  'pulseshooting',\n",
              "  'orlandoshooting',\n",
              "  'biggerproblems',\n",
              "  'selfish',\n",
              "  'heabreaking',\n",
              "  'values',\n",
              "  'love'],\n",
              " ['gettingfed'],\n",
              " ['got', 'junior', 'yugyoem', 'omg'],\n",
              " ['thankful', 'positive'],\n",
              " ['friday', 'cookies'],\n",
              " [],\n",
              " ['euro'],\n",
              " ['badday', 'coneofshame', 'cats', 'pissed', 'funny', 'laughs'],\n",
              " ['wine', 'weekend'],\n",
              " ['tgif', 'gamedev', 'indiedev', 'indiegamedev', 'squad'],\n",
              " ['upsideofflorida', 'shopalyssas', 'love'],\n",
              " ['smiles', 'media', 'pressconference', 'antalya', 'turkey', 'throwback'],\n",
              " ['ica'],\n",
              " [],\n",
              " ['rip', 'orlando'],\n",
              " [],\n",
              " ['alohafriday', 'time', 'not', 'exist', 'positivevibes', 'hawaiian'],\n",
              " [],\n",
              " ['goodnight', 'badmonday'],\n",
              " ['taylorswift'],\n",
              " ['travelingram', 'dalat', 'ripinkylife'],\n",
              " ['photoshop',\n",
              "  'enoughisenough',\n",
              "  'dontphotoshopeverything',\n",
              "  'wheresallthenaturalphotos'],\n",
              " ['cedarpoint'],\n",
              " ['thankful', 'positive'],\n",
              " ['bookworm', 'ontothenextnovel'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['flowers',\n",
              "  'grow',\n",
              "  'gardening',\n",
              "  'iphonesia',\n",
              "  'bliss',\n",
              "  'blooms',\n",
              "  'basilicabotanica'],\n",
              " ['positive', 'affirmation'],\n",
              " ['model'],\n",
              " ['whenever', 'something', 'wrong'],\n",
              " ['illustration'],\n",
              " [],\n",
              " ['abc', 'pulseclub', 'prayfororlando'],\n",
              " ['bihday', 'nose', 'job', 'bihday', 'petunia'],\n",
              " ['albanpilgrimage'],\n",
              " [],\n",
              " ['wedding'],\n",
              " [],\n",
              " ['video', 'fathers', 'day', 'rayos', 'world', 'hotvideo', 'videos'],\n",
              " ['ascot', 'fashion', 'monochrome', 'style', 'instahappyday'],\n",
              " ['selfie', 'yolo', 'xoxo', 'like'],\n",
              " ['work', 'mindset'],\n",
              " ['christinarip', 'voice', 'christinagrimmie'],\n",
              " ['roar', 'preschoolers', 'students', 'proud'],\n",
              " [],\n",
              " [],\n",
              " ['chatiado'],\n",
              " [],\n",
              " [],\n",
              " ['travel', 'yeah', 'thejourneybegins', 'hello'],\n",
              " ['luv', 'hottweets', 'venusexchange'],\n",
              " ['aworks', 'solutions'],\n",
              " ['orlando', 'disneygatorattack'],\n",
              " [],\n",
              " ['proud'],\n",
              " ['udtapunjab', 'amarinder', 'aap'],\n",
              " ['senseaboutmaths'],\n",
              " [],\n",
              " ['golfstrengthandconditioning', 'strong', 'felixfoisgolf'],\n",
              " ['greathonour', 'careerconvos'],\n",
              " ['innovative', 'wateringhole', 'cave', 'mountaintop', 'campfire'],\n",
              " [],\n",
              " ['heal', 'altwaystoheal', 'healthy', 'peace'],\n",
              " [],\n",
              " [],\n",
              " ['midweek', 'newmusic', 'watchthisspace', 'guitar'],\n",
              " [],\n",
              " [],\n",
              " ['snapchat', 'redhead', 'vermillionred'],\n",
              " ['people'],\n",
              " ['goodtimes', 'history'],\n",
              " ['summeime', 'memories'],\n",
              " ['memories'],\n",
              " [],\n",
              " ['model'],\n",
              " [],\n",
              " ['hump', 'hump', 'humpers'],\n",
              " ['shop', 'cool', 'home', 'fun'],\n",
              " [],\n",
              " [],\n",
              " ['nashvilletour', 'nashvilleforever'],\n",
              " ['eur', 'blog', 'silver', 'gold', 'forex'],\n",
              " [],\n",
              " ['thankful', 'positive'],\n",
              " ['christinagrimmie', 'prayfororlando'],\n",
              " ['eyelids'],\n",
              " ['vigilfororlando', 'harp', 'clonakilty', 'rip'],\n",
              " ['ihavenofriends', 'someonecomewithme'],\n",
              " ['weekend',\n",
              "  'relax',\n",
              "  'icon',\n",
              "  'woman',\n",
              "  'sundaymorning',\n",
              "  'sunday',\n",
              "  'marilynmonroe'],\n",
              " [],\n",
              " ['marvel', 'song', 'musica', 'weed', 'ripchristina', 'adele', 'dance'],\n",
              " ['under', 'blog', 'silver', 'gold', 'forex'],\n",
              " ['healthy', 'altwaystoheal'],\n",
              " ['model'],\n",
              " ['ofw', 'pinoy', 'followme', 'igers', 'instagood', 'smile', 'love'],\n",
              " ['toradora', 'anime', 'animeedit', 'breakups', 'alone', 'lonely'],\n",
              " [],\n",
              " ['cotd'],\n",
              " [],\n",
              " ['football', 'snapchat'],\n",
              " ['fringes', 'qcbags', 'summer'],\n",
              " ['nochebuena', 'lasvegas', 'usa'],\n",
              " ['instaboy',\n",
              "  'instaman',\n",
              "  'sefie',\n",
              "  'septum',\n",
              "  'friend',\n",
              "  'smiles',\n",
              "  'blackandwhite'],\n",
              " ['haiku', 'micropoetry'],\n",
              " ['jewelrymaking', 'buttons'],\n",
              " ['weston'],\n",
              " ['eos', 'fun', 'cawaii', 'love', 'strawberry', 'tomato'],\n",
              " ['boy', 'guy'],\n",
              " ['social', 'analytics', 'photooftheday', 'igers', 'likes'],\n",
              " ['doj',\n",
              "  'fbi',\n",
              "  'emailgate',\n",
              "  'hillary',\n",
              "  'shameful',\n",
              "  'disgraceful',\n",
              "  'ridiculous'],\n",
              " ['stupidity', 'negligence', 'sachintendulkar'],\n",
              " ['bestfriend', 'love'],\n",
              " ['enjoy', 'pooh'],\n",
              " ['chrisevans', 'bihday'],\n",
              " ['florida'],\n",
              " ['newalbum', 'indie', 'guitars', 'echobelly'],\n",
              " ['tgif', 'webmareting', 'seo', 'community', 'management', 'weekend'],\n",
              " ['nzd', 'blog', 'silver', 'gold', 'forex'],\n",
              " ['bihdayweeksucks', 'bithday'],\n",
              " [],\n",
              " ['disneysmagickingdom', 'disney', 'magickingdom', 'disneyland', 'orlando'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['healthy'],\n",
              " ['love', 'commitment', 'trust', 'faithful'],\n",
              " ['newarkfestival'],\n",
              " ['mochithepug', 'puglife'],\n",
              " [],\n",
              " ['justalillate', 'butstillontime'],\n",
              " ['goodmorning', 'friday', 'girls', 'love', 'florida'],\n",
              " ['aap', 'punjabis', 'drugaddicts'],\n",
              " ['tracerequest', 'touched'],\n",
              " ['guy', 'mato', 'chapones'],\n",
              " ['friends'],\n",
              " ['model'],\n",
              " ['bloke'],\n",
              " [],\n",
              " ['vfest', 'summer'],\n",
              " ['bihday', 'shane', 'watson', 'australia', 'cricker'],\n",
              " ['whoknows'],\n",
              " ['radio', 'coldplay'],\n",
              " [],\n",
              " [],\n",
              " ['gloucesterrugby'],\n",
              " [],\n",
              " ['sad',\n",
              "  'together',\n",
              "  'alone',\n",
              "  'down',\n",
              "  'fine',\n",
              "  'dandy',\n",
              "  'lonely',\n",
              "  'exuberant',\n",
              "  'depressed',\n",
              "  'halffull',\n",
              "  'halfempty'],\n",
              " ['mikeashley', 'sposdirectshame', 'workersrights', 'euref', 'remain'],\n",
              " ['birds', 'stella', 'bad', 'princess'],\n",
              " [],\n",
              " ['really'],\n",
              " [],\n",
              " ['orlando', 'heabreaking'],\n",
              " ['runbeck', 'happiness', 'quotes', 'inspirational'],\n",
              " ['acne', 'altwaystoheal', 'healthy', 'healing'],\n",
              " ['beats', 'makingbeats', 'thursday', 'work', 'istandard', 'akaipro'],\n",
              " ['wedding', 'weddingpay', 'love', 'forever', 'weddingdress'],\n",
              " ['cpd', 'onemoreday'],\n",
              " ['twitch', 'stream'],\n",
              " ['verbal', 'abuse', 'love', 'adult', 'teen'],\n",
              " [],\n",
              " ['thankful', 'positive'],\n",
              " ['dejeuner', 'lunch', 'happiness', 'love', 'amoureux'],\n",
              " ['lawofattraction',\n",
              "  'quiz',\n",
              "  'love',\n",
              "  'happiness',\n",
              "  'motivation',\n",
              "  'success',\n",
              "  'joy',\n",
              "  'life'],\n",
              " ['pole',\n",
              "  'bgp',\n",
              "  'rozthediva',\n",
              "  'blackgirlspole',\n",
              "  'bodyandpole',\n",
              "  'live',\n",
              "  'love'],\n",
              " ['argentina'],\n",
              " [],\n",
              " ['nohcarolina'],\n",
              " ['building'],\n",
              " ['ksleg'],\n",
              " ['orlando'],\n",
              " ['aly', 'cute', 'summer', 'photographerdubai', 'sun', 'hair', 'mydubai'],\n",
              " [],\n",
              " [],\n",
              " ['positive', 'affirmation'],\n",
              " ['thankful', 'positive'],\n",
              " [],\n",
              " ['wimbledon'],\n",
              " ['success',\n",
              "  'model',\n",
              "  'entrepreneur',\n",
              "  'speaker',\n",
              "  'fresh',\n",
              "  'confident',\n",
              "  'fashion'],\n",
              " ['gala', 'day', 'kid', 'bipolar', 'frikiegirl'],\n",
              " [],\n",
              " ['amazing', 'dads', 'enjoy'],\n",
              " ['magnettherapy', 'altwaystoheal', 'healing', 'healthy'],\n",
              " [],\n",
              " ['smile', 'egsmile', 'torio'],\n",
              " [],\n",
              " [],\n",
              " ['bus', 'alamindah', 'white', 'music', 'carrieunderwood'],\n",
              " ['model'],\n",
              " [],\n",
              " ['propey', 'ocean', 'summer', 'life', 'family'],\n",
              " ['quote',\n",
              "  'quotes',\n",
              "  'love',\n",
              "  'pakistan',\n",
              "  'allin',\n",
              "  'girls',\n",
              "  'boys',\n",
              "  'fashion',\n",
              "  'feelings'],\n",
              " ['thankful', 'positive'],\n",
              " ['countdown', 'nolefam'],\n",
              " [],\n",
              " [],\n",
              " ['wakow',\n",
              "  'buzz',\n",
              "  'moment',\n",
              "  'ride',\n",
              "  'love',\n",
              "  'crush',\n",
              "  'dating',\n",
              "  'hookup',\n",
              "  'app'],\n",
              " [],\n",
              " ['risay', 'risaypls'],\n",
              " ['thursday'],\n",
              " ['positive', 'affirmation'],\n",
              " [],\n",
              " ['thankful', 'blessed', 'jeffreycwilliams'],\n",
              " ['buttrue'],\n",
              " ['cute', 'smiles', 'babygirl', 'beautiful', 'niece', 'blessed'],\n",
              " ['oneteamlincoln'],\n",
              " ['rockthepark', 'timetogetmyjesuson'],\n",
              " [],\n",
              " ['happiness'],\n",
              " ['sanjapan', 'animeconvention'],\n",
              " ['tech', 'announcements', 'moto', 'question'],\n",
              " ['mondaymotivation', 'livelifetothefullest', 'healthy', 'everydaycounts'],\n",
              " ['classmate', 'friends'],\n",
              " ['brentwood', 'homesta'],\n",
              " ['kitten', 'cat', 'blackkitten'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['pharrellwilliams'],\n",
              " ['work'],\n",
              " ['gutted', 'rosie'],\n",
              " ['fever'],\n",
              " ['mad', 'teeth', 'bite', 'pissed', 'dog', 'biting', 'dogbite', 'dogtreat'],\n",
              " ['dreamcatcher'],\n",
              " ['englishteacher', 'teacher', 'ecuador'],\n",
              " ['strong', 'greatquotes'],\n",
              " [],\n",
              " ['itako', 'alone', 'it'],\n",
              " ['letthembelittle', 'childhoodunplugged'],\n",
              " ['calm', 'sunny', 'chubbygirl', 'glasses', 'finnishgirl', 'finn'],\n",
              " ['yuhuuuuu', 'tma'],\n",
              " ['nationalbestfriendsday', 'true'],\n",
              " [],\n",
              " ['ugh'],\n",
              " ['model'],\n",
              " ['game', 'gaming', 'girlgamer', 'voez'],\n",
              " ['weekend'],\n",
              " [],\n",
              " ['beyou', 'ofbham'],\n",
              " ['fathersday', 'love'],\n",
              " [],\n",
              " [],\n",
              " ['positivevibes', 'fresh'],\n",
              " ['conjuring', 'readyornot', 'truestory'],\n",
              " [],\n",
              " ['iwearbanana'],\n",
              " ['scared', 'redditchbizhour'],\n",
              " [],\n",
              " ['smiles', 'corbinrayp'],\n",
              " ['scared', 'missyou', 'whatwasthat'],\n",
              " ['mondaymorning', 'mondaymotivation', 'monday', 'indraloka'],\n",
              " ['sanasafinaz', 'noexchangepolicy'],\n",
              " ['ending'],\n",
              " ['littlebear',\n",
              "  'joy',\n",
              "  'toddlerfriends',\n",
              "  'puresweetness',\n",
              "  'latergram',\n",
              "  'toddlerfun'],\n",
              " [],\n",
              " ['orlando'],\n",
              " [],\n",
              " ['pharrell'],\n",
              " [],\n",
              " [],\n",
              " ['real', 'tru'],\n",
              " ['slut',\n",
              "  'snapshot',\n",
              "  'hot',\n",
              "  'nasty',\n",
              "  'naughty',\n",
              "  'sexy',\n",
              "  'horny',\n",
              "  'shy',\n",
              "  'porn',\n",
              "  'nude',\n",
              "  'kinky',\n",
              "  'xxx'],\n",
              " ['thankfulthursday'],\n",
              " ['positive', 'affirmation'],\n",
              " ['canadianravers'],\n",
              " ['michaelkors', 'luckygirl', 'bihday', 'liverpool'],\n",
              " [],\n",
              " ['freakshake', 'freaks', 'yum', 'dalston'],\n",
              " [],\n",
              " ['thankful', 'positive'],\n",
              " [],\n",
              " ['vegan',\n",
              "  'organic',\n",
              "  'fresh',\n",
              "  'fruit',\n",
              "  'organic',\n",
              "  'healthy',\n",
              "  'healthyliving',\n",
              "  'life'],\n",
              " ['sad'],\n",
              " [],\n",
              " ['blackpool'],\n",
              " ['fathersday'],\n",
              " [],\n",
              " ['newblood'],\n",
              " ['funeral'],\n",
              " [],\n",
              " [],\n",
              " ['usa'],\n",
              " ['stephcurry', 'nbafinals'],\n",
              " ['grateful', 'affirmations'],\n",
              " ['missyou', 'mybrotherskeeper'],\n",
              " [],\n",
              " ['friday', 'weird'],\n",
              " [],\n",
              " ['directioner',\n",
              "  'niall',\n",
              "  'nialhoranfacts',\n",
              "  'niallerwins',\n",
              "  'hot',\n",
              "  'justindrewbieber',\n",
              "  'justindb',\n",
              "  'believetou'],\n",
              " ['father', 'sanya', 'whererefreshingbegins'],\n",
              " ['lifeaftersurgery',\n",
              "  'dog',\n",
              "  'dogslife',\n",
              "  'labrador',\n",
              "  'labradorretriever',\n",
              "  'lifeofsam'],\n",
              " ['glastofest'],\n",
              " [],\n",
              " [],\n",
              " ['mep', 'webseries'],\n",
              " ['model'],\n",
              " ['juneteenth', 'independenceday', 'food', 'rich', 'ancestral', 'heritage'],\n",
              " ['river'],\n",
              " ['pathetic', 'ripgop'],\n",
              " [],\n",
              " [],\n",
              " ['smile', 'instalike', 'instamood', 'instapic'],\n",
              " ['graffiti',\n",
              "  'dublin',\n",
              "  'ireland',\n",
              "  'music',\n",
              "  'vimeo',\n",
              "  'movie',\n",
              "  'video',\n",
              "  'europe',\n",
              "  'people',\n",
              "  'flow',\n",
              "  'fun',\n",
              "  'rafalwojcicki'],\n",
              " ['oitnbseason'],\n",
              " ['iampossible', 'extraordinaryladyspeaks', 'starawards'],\n",
              " ['breakfast', 'sun', 'day', 'sunnyday', 'sun', 'blue'],\n",
              " ['yellowjackets', 'neshl', 'bhl', 'hockey'],\n",
              " ['tonyawards'],\n",
              " ['fathers', 'day'],\n",
              " ['country', 'rock', 'bluegrass', 'beatles', 'love', 'pop', 'romance'],\n",
              " ['projects', 'blog', 'silver', 'gold', 'forex'],\n",
              " ['dayseventyseven', 'day', 'happiness', 'love', 'lifequotes', 'life'],\n",
              " [],\n",
              " ['bihday'],\n",
              " ['thankful', 'positive'],\n",
              " [],\n",
              " ['quiet', 'july', 'fireworks'],\n",
              " [],\n",
              " ['paratyphoid'],\n",
              " ['thevoice', 'stopthehate', 'ripchristina'],\n",
              " [],\n",
              " [],\n",
              " ['enjoy', 'music', 'today', 'free', 'apps', 'free', 'music'],\n",
              " ['lawofattraction',\n",
              "  'resources',\n",
              "  'healing',\n",
              "  'altwaystoheal',\n",
              "  'healthy',\n",
              "  'idwp'],\n",
              " [],\n",
              " ['music', 'therapy', 'healing', 'altwaystoheal', 'healthy'],\n",
              " [],\n",
              " ['salud', 'cheers', 'smile'],\n",
              " ['nofilter'],\n",
              " ['overwhelmed', 'happy'],\n",
              " [],\n",
              " ['buffalo'],\n",
              " [],\n",
              " ['thebachelorette', 'empty', 'nowine'],\n",
              " [],\n",
              " ['good', 'faith', 'vaitacacommafiasdv'],\n",
              " ['love', 'success', 'work', 'business'],\n",
              " ['torrington', 'lunch', 'afterschool', 'instadaily', 'yummy', 'withmom'],\n",
              " [],\n",
              " ['cycling', 'sunset', 'ride', 'bikes', 'fitness', 'cardio', 'dese'],\n",
              " [],\n",
              " ['tagsforlikes',\n",
              "  'food',\n",
              "  'friends',\n",
              "  'summer',\n",
              "  'swag',\n",
              "  'quotes',\n",
              "  'love',\n",
              "  'god',\n",
              "  'girl',\n",
              "  'weekend',\n",
              "  'polaroid',\n",
              "  'followme',\n",
              "  'teen',\n",
              "  'win',\n",
              "  'job'],\n",
              " ['payintheusa'],\n",
              " [],\n",
              " ['stellar', 'girls', 'dreamy', 'goodmorning'],\n",
              " [],\n",
              " [],\n",
              " ['yay', 'wednesdaywisdom'],\n",
              " ['forever'],\n",
              " ['bee'],\n",
              " ['beautiful', 'smooth', 'lifestyle', 'skin', 'instasize', 'fashion'],\n",
              " ['lawofattraction', 'healing', 'loa', 'healthy', 'well', 'idwp'],\n",
              " ['oil', 'blog', 'silver', 'gold', 'forex'],\n",
              " ['newblood'],\n",
              " ['first',\n",
              "  'bihday',\n",
              "  'puppy',\n",
              "  'eloise',\n",
              "  'sweetbabins',\n",
              "  'dog',\n",
              "  'growingup',\n",
              "  'cute',\n",
              "  'bihdaygirl'],\n",
              " [],\n",
              " ['prayfororlando', 'guncontrol'],\n",
              " ['smile', 'lovethem'],\n",
              " [],\n",
              " ['ombre', 'blue'],\n",
              " ['warcraft'],\n",
              " ['family', 'fun'],\n",
              " [],\n",
              " [],\n",
              " ['lover', 'friend', 'astrologer', 'love'],\n",
              " [],\n",
              " ['sdl'],\n",
              " ['summev', 'zoo'],\n",
              " ['heal', 'altwaystoheal', 'healthy'],\n",
              " ['roar', 'tiger', 'annaswelshzoo', 'bihdaycelebrations'],\n",
              " ['laugh', 'xtra'],\n",
              " ['positivevibes', 'sunshine', 'sunday'],\n",
              " [],\n",
              " ['masterkeyexperience'],\n",
              " ['face', 'pizza'],\n",
              " ['sisteradventures', 'sister', 'ilovemysister'],\n",
              " [],\n",
              " ['usn', 'navy'],\n",
              " ['euros'],\n",
              " ['happiness', 'minions'],\n",
              " ['bethesda'],\n",
              " ['tiggy', 'jax', 'soa', 'throwbackthursday'],\n",
              " ['eurogamer', 'pumped', 'eurogamer'],\n",
              " ['staytuned', 'tapfoags'],\n",
              " ['sun',\n",
              "  'love',\n",
              "  'outdoors',\n",
              "  'picnic',\n",
              "  'summer',\n",
              "  'family',\n",
              "  'daughter',\n",
              "  'father',\n",
              "  'desse',\n",
              "  'icecream'],\n",
              " ['retailtherapy', 'riverisland', 'shoppingqueen', 'alwayscheersyouup'],\n",
              " ['cleaning', 'laundryday'],\n",
              " ['ebay', 'woohoo', 'sell', 'selling', 'buy', 'shop', 'shopping'],\n",
              " ['thankful', 'positive'],\n",
              " ['chilled'],\n",
              " ['instagood', 'idola', 'idol', 'followme', 'selfie'],\n",
              " ['christinagrimmie', 'orlando', 'america'],\n",
              " ['brexit', 'blog', 'silver', 'gold'],\n",
              " ['eacbpm', 'busy'],\n",
              " ['alohabeachbus', 'hawaii', 'explore'],\n",
              " [],\n",
              " ['great'],\n",
              " [],\n",
              " ['birds', 'download', 'film', 'ita'],\n",
              " ['sunday',\n",
              "  'photo',\n",
              "  'model',\n",
              "  'urbex',\n",
              "  'topless',\n",
              "  'tits',\n",
              "  'mono',\n",
              "  'retweet',\n",
              "  'sexy',\n",
              "  'heels',\n",
              "  'ace'],\n",
              " [],\n",
              " ['shegotmarried'],\n",
              " ['model'],\n",
              " [],\n",
              " ['soccer', 'spring', 'season'],\n",
              " [],\n",
              " ['sun', 'fun', 'beachpark'],\n",
              " ['euros'],\n",
              " ['anime', 'love', 'story', 'not', 'ending', 'like'],\n",
              " ['poet'],\n",
              " ['positive', 'affirmation'],\n",
              " ['kpop'],\n",
              " ['essentialoils', 'anxiety', 'healthy', 'peace', 'altwaystoheal'],\n",
              " [],\n",
              " ['gettingold', 'becomingboring', 'notborderlands', 'goblizzard'],\n",
              " ['fatkidinacandystore'],\n",
              " ['snapshot', 'young', 'shy', 'kinky', 'wet', 'porn', 'hot', 'xxx', 'horny'],\n",
              " ['love', 'girl', 'snapchat', 'flowers', 'instasmile', 'instalove'],\n",
              " ['positive', 'affirmation'],\n",
              " [],\n",
              " ['acne', 'altwaystoheal', 'healthy', 'healing'],\n",
              " ['msgapparelstoday'],\n",
              " ['lovecamping', 'brownwood'],\n",
              " ['grateful', 'affirmations'],\n",
              " ['forever',\n",
              "  'karaoke',\n",
              "  'friends',\n",
              "  'friendship',\n",
              "  'love',\n",
              "  'nofilter',\n",
              "  'instacool',\n",
              "  'instagood'],\n",
              " [],\n",
              " ['thealter'],\n",
              " ['blog', 'silver', 'gold', 'forex'],\n",
              " ['fathersday', 'love'],\n",
              " ['motivation'],\n",
              " ['violent', 'world'],\n",
              " ['funny', 'truestory'],\n",
              " ['monday', 'menmodels'],\n",
              " [],\n",
              " [],\n",
              " ['oitnbseason'],\n",
              " [],\n",
              " ['noooo', 'whyyyy', 'loveyoudesi'],\n",
              " ['jordans', 'paid', 'wear', 'lowtops'],\n",
              " ['positive', 'affirmation'],\n",
              " ['salute'],\n",
              " ['nyc', 'newyorkcity', 'myview', 'wine', 'fridaynight'],\n",
              " [],\n",
              " ['love', 'blessed'],\n",
              " [],\n",
              " ['danian', 'love', 'colour', 'rainbow'],\n",
              " ['aiel', 'aielmaharashtra', 'irritated'],\n",
              " ['rocksteddy', 'band', 'enjoy', 'idol', 'omg'],\n",
              " ['cheapshot', 'lowblow', 'shame'],\n",
              " ['parenting', 'tantrum', 'toddler', 'calm', 'mindfulness', 'strong'],\n",
              " ['positive', 'affirmation'],\n",
              " ['siri', 'macos', 'wwdc'],\n",
              " ['diy', 'dresser', 'nicknacks', 'newelectricscrewdriver'],\n",
              " [],\n",
              " [],\n",
              " ['choices', 'always'],\n",
              " [],\n",
              " ['app', 'june', 'issue', 'bazaarmag'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['enjoy',\n",
              "  'greece',\n",
              "  'crete',\n",
              "  'sabinedrift',\n",
              "  'chillinn',\n",
              "  'blondegirl',\n",
              "  'bluedress'],\n",
              " [],\n",
              " ['gameready'],\n",
              " ['summer', 'life', 'tahiti', 'like'],\n",
              " ['stupidthoughts', 'quote', 'lmao'],\n",
              " ['downasquadmember', 'treeouts'],\n",
              " ['japan', 'blog', 'silver'],\n",
              " ['bbuk'],\n",
              " ['good', 'morning'],\n",
              " ['fridayfeeling', 'relax', 'bristol'],\n",
              " [],\n",
              " ['rap', 'hiphop', 'rock', 'funny', 'comedy', 'pop', 'kanyewest'],\n",
              " ['merry', 'christmas', 'new', 'year', 'freepik', 'decoration'],\n",
              " [],\n",
              " ['testing', 'tired', 'annoyed', 'why'],\n",
              " ['anxiety', 'altwaystoheal', 'healing', 'peace'],\n",
              " [],\n",
              " [],\n",
              " ['periscope', 'collegebound'],\n",
              " ['nervous', 'curious', 'bringiton'],\n",
              " ['lifegroup'],\n",
              " [],\n",
              " ['lawofattraction',\n",
              "  'resources',\n",
              "  'healing',\n",
              "  'altwaystoheal',\n",
              "  'healthy',\n",
              "  'idwp'],\n",
              " ['surfday', 'fathersday', 'dads', 'novyspos', 'novytowel', 'surfgear'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['showyourjeepday', 'jeepmafia', 'jeeplife', 'jeep'],\n",
              " [],\n",
              " [],\n",
              " ['gratitude', 'laurasworld'],\n",
              " [],\n",
              " ['nbafinals'],\n",
              " ['uot', 'savecharity', 'tragic', 'rip'],\n",
              " ['space', 'blue', 'fabricsourcing', 'finished', 'pillow', 'cushions'],\n",
              " [],\n",
              " [],\n",
              " ['fathersday', 'dad', 'financial', 'future', 'save', 'insure', 'invest'],\n",
              " ['saturday', 'weekend'],\n",
              " ['fathersday'],\n",
              " ['football'],\n",
              " ['buxton', 'grumpy'],\n",
              " [],\n",
              " ['troopingthecolour', 'thequeenat'],\n",
              " ['work', 'fusiona', 'development', 'chase'],\n",
              " ['hamster', 'rip', 'imissyou'],\n",
              " ['love'],\n",
              " ['love', 'boyfriend', 'smile'],\n",
              " ['icrs'],\n",
              " ['fun'],\n",
              " ['lichfield'],\n",
              " ['surprised', 'unexpected'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['embarrassing'],\n",
              " ['internationaldayofyoga',\n",
              "  'yogalove',\n",
              "  'yoga',\n",
              "  'relax',\n",
              "  'healthy',\n",
              "  'positive'],\n",
              " [],\n",
              " [],\n",
              " ['coldplay', 'conce', 'hampden', 'fave', 'couple', 'cute'],\n",
              " ['heal', 'altwaystoheal', 'healthy', 'peace'],\n",
              " ['flagday', 'texas', 'householdname', 'takingover'],\n",
              " [],\n",
              " ['cat', 'furry', 'persiancat'],\n",
              " ['tgif', 'kiss', 'kisses', 'friday', 'fridayfun'],\n",
              " ['blessed', 'thankful'],\n",
              " ['euro'],\n",
              " [],\n",
              " ['theriveourberlin', 'theboss'],\n",
              " ['nowplaying', 'sick', 'little', 'world', 'live', 'set'],\n",
              " [],\n",
              " ['dogs'],\n",
              " ['boohiss'],\n",
              " ['whenrealtorscompeteyouwin', 'callme', 'gotheextramile'],\n",
              " ['poaventura', 'whatajoke'],\n",
              " ['dcvotes'],\n",
              " ['eur', 'blog', 'silver', 'gold', 'forex'],\n",
              " ['elections', 'america', 'smh', 'usa'],\n",
              " ['animals', 'puppy', 'vine', 'magic', 'subscribe', 'youtube'],\n",
              " [],\n",
              " [],\n",
              " ['dads', 'fathersday', 'intellicred'],\n",
              " [],\n",
              " ['pwcproud'],\n",
              " ['love', 'instagood', 'tbt', 'cute', 'beautiful', 'followme'],\n",
              " ['weekend', 'family', 'home'],\n",
              " ['tragic', 'pulse', 'orlandostaystrong', 'thoughtsandprayers'],\n",
              " ['yrkkh', 'uglyspat'],\n",
              " [],\n",
              " ['thekilling'],\n",
              " [],\n",
              " ['travel',\n",
              "  'time',\n",
              "  'instamood',\n",
              "  'moments',\n",
              "  'love',\n",
              "  'mylife',\n",
              "  'russian',\n",
              "  'girl',\n",
              "  'model'],\n",
              " ['tuesday',\n",
              "  'jackie',\n",
              "  'quote',\n",
              "  'taketime',\n",
              "  'soul',\n",
              "  'enjoylife',\n",
              "  'smile',\n",
              "  'believe',\n",
              "  'dream',\n",
              "  'havefun'],\n",
              " ['edinburgh', 'scotland', 'homesweethome', 'family'],\n",
              " [],\n",
              " [],\n",
              " ['thankful', 'positive'],\n",
              " ['studiotime'],\n",
              " [],\n",
              " ['cfisdrrr'],\n",
              " ['prettypussy', 'sexybbw', 'realmvp'],\n",
              " ['excit'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['stones', 'gift', 'amazing', 'beautiful'],\n",
              " ['lfc', 'ynwa', 'englishpremierleague'],\n",
              " ['rogergoodell', 'fathersday', 'goodellsucks'],\n",
              " ['orb', 'blog', 'silver', 'gold', 'forex'],\n",
              " [],\n",
              " [],\n",
              " ['loveyou', 'fathersday', 'sunday', 'father', 'daddy'],\n",
              " [],\n",
              " ['actor', 'seeklearning', 'stafresh'],\n",
              " [],\n",
              " ['bastard'],\n",
              " ['socialmedia'],\n",
              " ['smaphone'],\n",
              " ['lifeisbeautiful', 'loveit', 'workhard', 'trainhard', 'blessed', 'fitlife'],\n",
              " ['spos', 'during', 'luis', 'oscar'],\n",
              " ['njoyhit', 'nice', 'nyc'],\n",
              " ['personaltrainer'],\n",
              " [],\n",
              " ['thankful', 'positive'],\n",
              " ['melancholy', 'melancholymusic'],\n",
              " ['tvk'],\n",
              " ['thankful', 'positive'],\n",
              " ['thankful', 'positive'],\n",
              " [],\n",
              " ['love', 'sinkthepink', 'music', 'instagay', 'celebspot'],\n",
              " ['ccmf', 'mychurch', 'frontrow', 'upshow'],\n",
              " ['stupidity', 'africa'],\n",
              " ['gold', 'blog', 'silver', 'gold', 'forex'],\n",
              " ['horrific', 'unforgiveable'],\n",
              " ['positive', 'affirmation'],\n",
              " ['instatraveling',\n",
              "  'instamoment',\n",
              "  'igdaily',\n",
              "  'instagramhub',\n",
              "  'instagood',\n",
              "  'instalike'],\n",
              " ['lonely'],\n",
              " ['girliguessimwithher'],\n",
              " ['mobile', 'whitepaper'],\n",
              " [],\n",
              " ['work', 'mindset'],\n",
              " ['rochester'],\n",
              " [],\n",
              " ['tattoosleeves'],\n",
              " [],\n",
              " ['tell', 'river', 'complain', 'philosophy', 'proverb'],\n",
              " ['thankful', 'positive'],\n",
              " [],\n",
              " ['happiness', 'lifecoach', 'reinventimpossible'],\n",
              " [],\n",
              " ['thankful', 'positive'],\n",
              " ['outside',\n",
              "  'thepeel',\n",
              "  'work',\n",
              "  'homophobic',\n",
              "  'taxi',\n",
              "  'driver',\n",
              "  'guys',\n",
              "  'kiss',\n",
              "  'gay',\n",
              "  'melbourne'],\n",
              " [],\n",
              " ['smiles', 'kindness'],\n",
              " ['windows', 'browser', 'customcasetab', 'noedit'],\n",
              " [],\n",
              " ['why'],\n",
              " ['totalpolitician', 'outoftouch', 'disgraceful'],\n",
              " ['fathersday'],\n",
              " ['truth', 'suicide', 'blackboys'],\n",
              " ['homesweethome',\n",
              "  'amazing',\n",
              "  'love',\n",
              "  'istanbul',\n",
              "  'girl',\n",
              "  'beautiful',\n",
              "  'instalike'],\n",
              " [],\n",
              " [],\n",
              " ['swing', 'mybabygirl', 'baby', 'littlegirl', 'park', 'love', 'cute'],\n",
              " ['winter', 'bathtime', 'cozy'],\n",
              " ['positive', 'affirmation'],\n",
              " [],\n",
              " ['sunflowers', 'nature', 'garden', 'photograpy'],\n",
              " [],\n",
              " ['growth', 'hacking', 'conference', 'growthwithhubspot'],\n",
              " ['dog', 'sunshine', 'dogsoftwitter'],\n",
              " ['sleepnumber', 'bonustolongrest', 'dnd'],\n",
              " ['satisfying', 'hair', 'workit', 'smile', 'face'],\n",
              " ['sunday', 'weekend', 'selfie', 'longhair', 'girl', 'selfporait', 'love'],\n",
              " ['nature'],\n",
              " ['model'],\n",
              " [],\n",
              " ['golinuntern'],\n",
              " ['grimm', 'nadalind'],\n",
              " [],\n",
              " ['disrespectful', 'frustrated'],\n",
              " ['friday', 'pub', 'ilovehim', 'instagay', 'beer'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['fruit',\n",
              "  'desse',\n",
              "  'instamoment',\n",
              "  'photooftheday',\n",
              "  'yvr',\n",
              "  'sweet',\n",
              "  'vancitybuzz'],\n",
              " [],\n",
              " ['iqbal', 'galib', 'wasi', 'faraz', 'mohsin'],\n",
              " ['armaanamaalontkss'],\n",
              " ['royals', 'cleveland', 'disgraced'],\n",
              " [],\n",
              " ['latina'],\n",
              " ['orlando'],\n",
              " ['triathlete', 'triathlon', 'coach', 'vacation', 'fearless', 'rul'],\n",
              " ['reflective'],\n",
              " ['gratitude'],\n",
              " [],\n",
              " ['takalot', 'bengreenfield'],\n",
              " ['saysomething'],\n",
              " [],\n",
              " [],\n",
              " ['slugg'],\n",
              " ['awesome', 'beat', 'cool', 'dance', 'edm', 'house', 'goodmusic', 'madness'],\n",
              " ['jpy', 'blog', 'silver', 'gold', 'forex'],\n",
              " [],\n",
              " ['steakandshake', 'not'],\n",
              " ['grayneedstogo'],\n",
              " ['leadership', 'inspiration', 'quote', 'inspirational'],\n",
              " ['usd', 'blog', 'silver', 'gold', 'forex'],\n",
              " ['noise'],\n",
              " ['loveherbreakups', 'hotgoss'],\n",
              " ['sunshine', 'sunshine'],\n",
              " ['gaming', 'gamer', 'xboxone', 'playstation'],\n",
              " ['bringbackgladiators'],\n",
              " ['humpday',\n",
              "  'life',\n",
              "  'lifestyle',\n",
              "  'wednesday',\n",
              "  'midweek',\n",
              "  'snapchat',\n",
              "  'walrus',\n",
              "  'funny'],\n",
              " [],\n",
              " ['archiveday', 'weekendblogshare', 'happiness', 'quotes', 'tshis'],\n",
              " ['goodtogreat', 'inspireme', 'love'],\n",
              " ['london', 'puppy', 'thursdaymotivation'],\n",
              " ['drawing', 'blackandwhite'],\n",
              " ['romances', 'horror', 'moviegenres', 'ambiance'],\n",
              " ['wildlifefestival'],\n",
              " ['ewabeach', 'magicalhappydrinks'],\n",
              " ['pleasedontchange'],\n",
              " ['holiday', 'croatia'],\n",
              " [],\n",
              " ['newyork', 'newyorkcity', 'travel', 'bigapple'],\n",
              " ['motivation'],\n",
              " ['fashionblog'],\n",
              " ['becauseofhim', 'inlove'],\n",
              " ['smile', 'love', 'iminlove', 'iam', 'nice', 'day'],\n",
              " ['monaco',\n",
              "  'resto',\n",
              "  'chezedgard',\n",
              "  'grandprixf',\n",
              "  'essais',\n",
              "  'sun',\n",
              "  'lewissuppo',\n",
              "  'amour',\n",
              "  'love'],\n",
              " ['toread', 'letsmake'],\n",
              " ['sukhbir', 'badal', 'eastcoast', 'canada'],\n",
              " [],\n",
              " ['shop', 'cool', 'home', 'fun'],\n",
              " [],\n",
              " ['scottieandrussell', 'work', 'love', 'picoftheday'],\n",
              " ['rain', 'water', 'tbt', 'weather', 'bribieisland'],\n",
              " [],\n",
              " ['wedding', 'love'],\n",
              " ['icymi', 'debeloping', 'guns'],\n",
              " ['schoolsupplies'],\n",
              " ['babiescat', 'cat', 'newborn', 'congratulations'],\n",
              " ['pretending',\n",
              "  'to',\n",
              "  'be',\n",
              "  'when',\n",
              "  'you',\n",
              "  'in',\n",
              "  'pain',\n",
              "  'is',\n",
              "  'just',\n",
              "  'an',\n",
              "  'example',\n",
              "  'of',\n",
              "  'how',\n",
              "  'strong',\n",
              "  'you',\n",
              "  'are',\n",
              "  'as',\n",
              "  'a',\n",
              "  'person',\n",
              "  'nighty'],\n",
              " [],\n",
              " ['mentalhealth'],\n",
              " ['weekend'],\n",
              " ['thankful', 'positive'],\n",
              " ['cssday'],\n",
              " ['bihday',\n",
              "  'mom',\n",
              "  'fondant',\n",
              "  'pumpkin',\n",
              "  'chocolate',\n",
              "  'delicious',\n",
              "  'beautiful',\n",
              "  'amazing'],\n",
              " ['bigbang', 'babies'],\n",
              " ['tgifriday', 'goodvibesonly', 'becauseimhappy', 'smilemore'],\n",
              " ['letsgo', 'agents', 'tooeasy', 'dlc', 'gamingforeveryone'],\n",
              " ['tissues'],\n",
              " [],\n",
              " ['fowoh', 'goldenretriever', 'lcck', 'workingdog'],\n",
              " [],\n",
              " ['edc', 'music', 'musiclife', 'edm', 'dance', 'girls'],\n",
              " ['funny', 'humankind', 'news', 'bad', 'good', 'future'],\n",
              " [],\n",
              " [],\n",
              " ['wishing', 'dads', 'father', 'day', 'rock'],\n",
              " ['abrahamhicks', 'lawofattraction', 'healthy', 'healing', 'joytrain'],\n",
              " ['model'],\n",
              " [],\n",
              " ['smile'],\n",
              " ['success', 'quote'],\n",
              " [],\n",
              " ['friends', 'sweden', 'reunion', 'grateful', 'love'],\n",
              " ['pizzaslice',\n",
              "  'pizzaslice',\n",
              "  'aoyama',\n",
              "  'pizza',\n",
              "  'yummy',\n",
              "  'delicias',\n",
              "  'goodtimeswithgo'],\n",
              " ['beer',\n",
              "  'craftbeee',\n",
              "  'dog',\n",
              "  'malinoislovers',\n",
              "  'malinois',\n",
              "  'passion',\n",
              "  'friend'],\n",
              " ['positive', 'affirmation'],\n",
              " ['father', 'day', 'dad', 'skinny', 'and', 'single'],\n",
              " [],\n",
              " ['cleveland', 'home', 'calm'],\n",
              " ['guns', 'mentalillness', 'gangs', 'orlando'],\n",
              " [],\n",
              " ['blessed', 'lipstick', 'makeup', 'fun', 'grateful', 'share'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['saturday', 'morning', 'thetrust', 'comusic', 'indie'],\n",
              " ['father', 'day'],\n",
              " ['good'],\n",
              " [],\n",
              " ['orlando', 'vengeance'],\n",
              " ['live'],\n",
              " ['graduation', 'mechtechplumbing', 'futureplumber', 'proudmama'],\n",
              " ['model'],\n",
              " ['orlando', 'christinagrimmie', 'prayers'],\n",
              " ['innovative'],\n",
              " ['social', 'analytics', 'instalike', 'tbt', 'yoga', 'summer', 'fun'],\n",
              " [],\n",
              " ['newflat'],\n",
              " ['love', 'cheese', 'shotermlongdistance'],\n",
              " ['friendship'],\n",
              " ['poor', 'sin', 'jesus', 'faith', 'believe', 'wisdom'],\n",
              " ['lovequotes'],\n",
              " ['positive'],\n",
              " ['orlandoshooting', 'gunviolence'],\n",
              " ['zaz', 'umbrelas'],\n",
              " [],\n",
              " ['tcashowroom'],\n",
              " [],\n",
              " ['relaxation', 'positivevibes', 'california', 'cakesbytheocean'],\n",
              " ['eur', 'blog', 'silver', 'gold', 'forex'],\n",
              " ['brokedonald', 'lyindon'],\n",
              " ['friday', 'fridayfeeling', 'friyay', 'goodweek', 'clients', 'hair'],\n",
              " [],\n",
              " [],\n",
              " ['selfie', 'myfriend', 'loveher', 'giannena', 'smile', 'thecomeback'],\n",
              " [],\n",
              " [],\n",
              " ['burnsurvivor', 'dolbf', 'motivation', 'motivate'],\n",
              " ['greatfultogod', 'beendoinggreat', 'selfie'],\n",
              " ['dogs'],\n",
              " ['nosie', 'year', 'wrc', 'rallypoland'],\n",
              " ['music', 'edinburgh', 'scotland', 'band', 'musicvideo'],\n",
              " ['pulseshooting'],\n",
              " [],\n",
              " [],\n",
              " ['drakeandjosh'],\n",
              " [],\n",
              " ['openrp', 'bored'],\n",
              " ['manchester', 'gin'],\n",
              " ['trailn'],\n",
              " ['kikidance', 'miabbook'],\n",
              " ['inspiration', 'lyf', 'baba'],\n",
              " ['beautiful', 'homeowner'],\n",
              " [],\n",
              " [],\n",
              " ['brickingit'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['shop', 'cool', 'home', 'fun'],\n",
              " ['doubledown', 'veganbeerfest', 'vegan'],\n",
              " [],\n",
              " ['bjmckenzie', 'born', 'bjmuzic'],\n",
              " [],\n",
              " ['jaibalayya'],\n",
              " ['kingslanding', 'highlandreserve', 'house', 'family', 'building', 'ourhome'],\n",
              " [],\n",
              " ['decors'],\n",
              " ['sold'],\n",
              " [],\n",
              " ['marbs', 'euro', 'depressing', 'bringbackhappiness'],\n",
              " [],\n",
              " ['gdragon',\n",
              "  'kwonjiyong',\n",
              "  'jiyong',\n",
              "  'vip',\n",
              "  'bigbang',\n",
              "  'handsome',\n",
              "  'cute',\n",
              "  'love'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['developers', 'python'],\n",
              " ['womenareamazing', 'induoevents', 'superwomen', 'follow', 'dowhatyoulove'],\n",
              " [],\n",
              " ['oitnb', 'myfavorite', 'season', 'weekendplans'],\n",
              " ['christinagrimmie', 'loss', 'rip', 'missed', 'fan', 'foreverinourheas'],\n",
              " ['sundayrewind', 'hongkong', 'travel', 'lady', 'lawyer'],\n",
              " ['ingers',\n",
              "  'followme',\n",
              "  'follow',\n",
              "  'follow',\n",
              "  'beach',\n",
              "  'pool',\n",
              "  'relax',\n",
              "  'enjoy',\n",
              "  'couple'],\n",
              " ['family', 'freeevent', 'festival', 'food', 'stalls'],\n",
              " ['awesome', 'gopro', 'mounts'],\n",
              " ['booktime', 'muchlove'],\n",
              " ['summerevening', 'patioweather'],\n",
              " [],\n",
              " ['imy'],\n",
              " ['model'],\n",
              " ['theshallows'],\n",
              " ['official', 'poster', 'poalorigins', 'summer'],\n",
              " ['wwdc', 'wwdc'],\n",
              " [],\n",
              " ['blessed', 'thankful'],\n",
              " ['sundaymorning', 'sunday', 'peace', 'love'],\n",
              " ['quotes', 'latenights'],\n",
              " [],\n",
              " ['selflove',\n",
              "  'love',\n",
              "  'iloveme',\n",
              "  'quote',\n",
              "  'quotes',\n",
              "  'quoteoftheday',\n",
              "  'happiness',\n",
              "  'life',\n",
              "  'wisdom',\n",
              "  'wordsofwisdom'],\n",
              " ['boys', 'father', 'sweet', 'love', 'memory'],\n",
              " [],\n",
              " ['life',\n",
              "  'impoant',\n",
              "  'human',\n",
              "  'spirit',\n",
              "  'truth',\n",
              "  'love',\n",
              "  'give',\n",
              "  'spirituality',\n",
              "  'thinkbigsundaywithmarsha'],\n",
              " ['father'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['wedding', 'love'],\n",
              " ['friday'],\n",
              " [],\n",
              " ['fun', 'eat'],\n",
              " [],\n",
              " ['blogger', 'vlogger'],\n",
              " ['edinburgh'],\n",
              " [],\n",
              " [],\n",
              " ['passthecourvoisier'],\n",
              " ['rescuepup', 'rexy', 'pupsofsg', 'suicidegirls', 'beautiful', 'puppylove'],\n",
              " ['tech', 'augmented', 'future', 'mobile'],\n",
              " [],\n",
              " [],\n",
              " ['hellosunday', 'beautiful', 'sunday', 'sundayfunday'],\n",
              " [],\n",
              " ['nzd', 'blog', 'silver', 'gold', 'forex'],\n",
              " [],\n",
              " ['bihday', 'rip', 'tupac'],\n",
              " [],\n",
              " ['motionposter', 'mupparimanam', 'nervous'],\n",
              " [],\n",
              " ['compleanno', 'toa', 'cake', 'family', 'selfie', 'smile', 'girl', 'summer'],\n",
              " ['anime', 'anime', 'tags', 'anime', 'fana'],\n",
              " ['memories', 'lotstocome', 'love'],\n",
              " ['spoonieproblems'],\n",
              " ['blessed'],\n",
              " ['eur', 'blog', 'silver', 'gold', 'forex'],\n",
              " ['ngitingtagumpay'],\n",
              " ['welcomeludovica'],\n",
              " ['cloudchaser'],\n",
              " ['vlicobs',\n",
              "  'xoxo',\n",
              "  'love',\n",
              "  'grace',\n",
              "  'amen',\n",
              "  'share',\n",
              "  'passion',\n",
              "  'church',\n",
              "  'life'],\n",
              " ['jobs', 'jobsearch', 'chandigarh'],\n",
              " ['restaurant', 'eatallyoucan'],\n",
              " ['nervous', 'gameofthrones'],\n",
              " [],\n",
              " ['intruduceyourself'],\n",
              " ['ramadan', 'ramadankareem'],\n",
              " [],\n",
              " ['success', 'growth', 'balance', 'optimism'],\n",
              " [],\n",
              " ['thankful', 'positive'],\n",
              " [],\n",
              " ['beach', 'loveit'],\n",
              " [],\n",
              " ['tgif', 'gamedev', 'indiedev', 'indiegamedev', 'squad'],\n",
              " [],\n",
              " ['goodmorning'],\n",
              " [],\n",
              " ['yum', 'thespicesndteaexchange', 'healthy'],\n",
              " ['followme'],\n",
              " ['love',\n",
              "  'like',\n",
              "  'live',\n",
              "  'life',\n",
              "  'enjoy',\n",
              "  'healthy',\n",
              "  'sun',\n",
              "  'tan',\n",
              "  'bikini',\n",
              "  'summer'],\n",
              " ['teenageson', 'fathersday'],\n",
              " [],\n",
              " [],\n",
              " ['getalife'],\n",
              " [],\n",
              " ['nothappy'],\n",
              " ['closeencounters',\n",
              "  'fatkind',\n",
              "  'fatkid',\n",
              "  'dese',\n",
              "  'sick',\n",
              "  'tired',\n",
              "  'maybemono'],\n",
              " ['gymmorgon', 'gym', 'morning', 'strength', 'energy', 'training'],\n",
              " [],\n",
              " ['truthseekers', 'empowerment', 'selfimprovement', 'healing', 'ihearadio'],\n",
              " ['deletetweets'],\n",
              " ['view',\n",
              "  'oregon',\n",
              "  'poland',\n",
              "  'usa',\n",
              "  'unitedstates',\n",
              "  'holiday',\n",
              "  'producer',\n",
              "  'house'],\n",
              " ['vote', 'share', 'you', 'smile', 'poll'],\n",
              " [],\n",
              " ['travelwise', 'europe', 'london', 'paris'],\n",
              " ['thankful', 'positive'],\n",
              " [],\n",
              " [],\n",
              " ['smile', 'pearly'],\n",
              " ['gentleman'],\n",
              " ['love'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['movinghou'],\n",
              " ['music'],\n",
              " ['barbeque',\n",
              "  'hostel',\n",
              "  'summer',\n",
              "  'surf',\n",
              "  'kitesurf',\n",
              "  'wave',\n",
              "  'fun',\n",
              "  'holiday'],\n",
              " ['cnnelection', 'onpoint'],\n",
              " ['masterkeyexperience'],\n",
              " ['crazy',\n",
              "  'fashion',\n",
              "  'fun',\n",
              "  'color',\n",
              "  'gowns',\n",
              "  'fashiondesign',\n",
              "  'design',\n",
              "  'illustration'],\n",
              " ['fitness', 'fresh'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['liberated'],\n",
              " [],\n",
              " ['newyear', 'newblessings', 'thankful', 'grateful'],\n",
              " ['cymruambyth'],\n",
              " ['teamandre', 'idontcareifhesbritish'],\n",
              " ['hurryup'],\n",
              " ['happiness', 'realtimechem', 'chemistry', 'education'],\n",
              " ['sunday',\n",
              "  'weekend',\n",
              "  'drinks',\n",
              "  'night',\n",
              "  'views',\n",
              "  'summer',\n",
              "  'fullmoon',\n",
              "  'dtla',\n",
              "  'fun'],\n",
              " [],\n",
              " ['euro'],\n",
              " ['windows', 'browser', 'lumia'],\n",
              " ['lighttherapy', 'depression', 'altwaystoheal', 'healthy', 'happy'],\n",
              " ['bless',\n",
              "  'thankful',\n",
              "  'optimistic',\n",
              "  'positive',\n",
              "  'faith',\n",
              "  'strong',\n",
              "  'motivation'],\n",
              " ['littlewonders'],\n",
              " [],\n",
              " [],\n",
              " ['atlanta'],\n",
              " ['balconyview',\n",
              "  'brunch',\n",
              "  'sundaybrunch',\n",
              "  'sunday',\n",
              "  'istanbul',\n",
              "  'love',\n",
              "  'girl',\n",
              "  'instalike'],\n",
              " ['columbus', 'mbb', 'mygrind', 'mrbaileybaby', 'tshi'],\n",
              " ['williams', 'blog', 'silver'],\n",
              " [],\n",
              " [],\n",
              " ['kids', 'destruction'],\n",
              " ['helpme', 'imnotusetothis', 'perfecttiming', 'weekend'],\n",
              " ['cantwait', 'latvia', 'hereicome', 'midsummers', 'familly', 'friends'],\n",
              " ['love', 'women'],\n",
              " ['educationfest'],\n",
              " [],\n",
              " ['revival', 'sunrise', 'rebelhea', 'morning', 'pielcanela'],\n",
              " [],\n",
              " ['lighttherapy', 'depression', 'altwaystoheal', 'healthy', 'happy'],\n",
              " ['peace', 'inspiration'],\n",
              " ['motivation'],\n",
              " ['teammacb', 'fitmom', 'fitlife'],\n",
              " [],\n",
              " ['tranny', 'ladyboy', 'asianladyboy', 'thailand', 'usa', 'lasvegas'],\n",
              " [],\n",
              " [],\n",
              " ['johnxsafaris', 'eastcapehunting', 'family', 'proud', 'africa'],\n",
              " ['selfie', 'freetime', 'smile', 'instavi', 'sonrisa', 'ust'],\n",
              " ['loop', 'shopping', 'vine'],\n",
              " ['coverlove', 'bookporn'],\n",
              " ['euref'],\n",
              " ['destiny'],\n",
              " ['positive', 'affirmation'],\n",
              " ['heal', 'healthy', 'idwp', 'joytrain'],\n",
              " ['running', 'park', 'summer', 'exercise', 'fitness', 'helthy'],\n",
              " ['hangingon'],\n",
              " [],\n",
              " [],\n",
              " [],\n",
              " ['hates', 'game', 'surveys'],\n",
              " ['lighttherapy', 'depression', 'altwaystoheal', 'healthy', 'happy'],\n",
              " ['smile', 'laugh', 'breathe', 'love'],\n",
              " ...]"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ],
      "source": [
        "positive_hashTags = extractHashtags(combined_data['Cleaned_Tweets'][combined_data['label'] == 0])\n",
        "\n",
        "positive_hashTags"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NVpSGZDBMtFw"
      },
      "source": [
        "#### Now unnesting the list:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {
        "scrolled": true,
        "id": "RQ6TvxmoMtFw",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "67e236af-5f38-4fac-fb18-36e88bd90098"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['run',\n",
              " 'lyft',\n",
              " 'disapointed',\n",
              " 'getthanked',\n",
              " 'model',\n",
              " 'motivation',\n",
              " 'allshowandnogo',\n",
              " 'school',\n",
              " 'exams',\n",
              " 'hate',\n",
              " 'imagine',\n",
              " 'actorslife',\n",
              " 'revolutionschool',\n",
              " 'girl',\n",
              " 'allin',\n",
              " 'cavs',\n",
              " 'champions',\n",
              " 'cleveland',\n",
              " 'clevelandcavaliers',\n",
              " 'ireland',\n",
              " 'blog',\n",
              " 'silver',\n",
              " 'gold',\n",
              " 'forex',\n",
              " 'orlando',\n",
              " 'standwithorlando',\n",
              " 'pulseshooting',\n",
              " 'orlandoshooting',\n",
              " 'biggerproblems',\n",
              " 'selfish',\n",
              " 'heabreaking',\n",
              " 'values',\n",
              " 'love',\n",
              " 'gettingfed',\n",
              " 'got',\n",
              " 'junior',\n",
              " 'yugyoem',\n",
              " 'omg',\n",
              " 'thankful',\n",
              " 'positive',\n",
              " 'friday',\n",
              " 'cookies',\n",
              " 'euro',\n",
              " 'badday',\n",
              " 'coneofshame',\n",
              " 'cats',\n",
              " 'pissed',\n",
              " 'funny',\n",
              " 'laughs',\n",
              " 'wine',\n",
              " 'weekend',\n",
              " 'tgif',\n",
              " 'gamedev',\n",
              " 'indiedev',\n",
              " 'indiegamedev',\n",
              " 'squad',\n",
              " 'upsideofflorida',\n",
              " 'shopalyssas',\n",
              " 'love',\n",
              " 'smiles',\n",
              " 'media',\n",
              " 'pressconference',\n",
              " 'antalya',\n",
              " 'turkey',\n",
              " 'throwback',\n",
              " 'ica',\n",
              " 'rip',\n",
              " 'orlando',\n",
              " 'alohafriday',\n",
              " 'time',\n",
              " 'not',\n",
              " 'exist',\n",
              " 'positivevibes',\n",
              " 'hawaiian',\n",
              " 'goodnight',\n",
              " 'badmonday',\n",
              " 'taylorswift',\n",
              " 'travelingram',\n",
              " 'dalat',\n",
              " 'ripinkylife',\n",
              " 'photoshop',\n",
              " 'enoughisenough',\n",
              " 'dontphotoshopeverything',\n",
              " 'wheresallthenaturalphotos',\n",
              " 'cedarpoint',\n",
              " 'thankful',\n",
              " 'positive',\n",
              " 'bookworm',\n",
              " 'ontothenextnovel',\n",
              " 'flowers',\n",
              " 'grow',\n",
              " 'gardening',\n",
              " 'iphonesia',\n",
              " 'bliss',\n",
              " 'blooms',\n",
              " 'basilicabotanica',\n",
              " 'positive',\n",
              " 'affirmation',\n",
              " 'model',\n",
              " 'whenever',\n",
              " 'something',\n",
              " 'wrong',\n",
              " 'illustration',\n",
              " 'abc',\n",
              " 'pulseclub',\n",
              " 'prayfororlando',\n",
              " 'bihday',\n",
              " 'nose',\n",
              " 'job',\n",
              " 'bihday',\n",
              " 'petunia',\n",
              " 'albanpilgrimage',\n",
              " 'wedding',\n",
              " 'video',\n",
              " 'fathers',\n",
              " 'day',\n",
              " 'rayos',\n",
              " 'world',\n",
              " 'hotvideo',\n",
              " 'videos',\n",
              " 'ascot',\n",
              " 'fashion',\n",
              " 'monochrome',\n",
              " 'style',\n",
              " 'instahappyday',\n",
              " 'selfie',\n",
              " 'yolo',\n",
              " 'xoxo',\n",
              " 'like',\n",
              " 'work',\n",
              " 'mindset',\n",
              " 'christinarip',\n",
              " 'voice',\n",
              " 'christinagrimmie',\n",
              " 'roar',\n",
              " 'preschoolers',\n",
              " 'students',\n",
              " 'proud',\n",
              " 'chatiado',\n",
              " 'travel',\n",
              " 'yeah',\n",
              " 'thejourneybegins',\n",
              " 'hello',\n",
              " 'luv',\n",
              " 'hottweets',\n",
              " 'venusexchange',\n",
              " 'aworks',\n",
              " 'solutions',\n",
              " 'orlando',\n",
              " 'disneygatorattack',\n",
              " 'proud',\n",
              " 'udtapunjab',\n",
              " 'amarinder',\n",
              " 'aap',\n",
              " 'senseaboutmaths',\n",
              " 'golfstrengthandconditioning',\n",
              " 'strong',\n",
              " 'felixfoisgolf',\n",
              " 'greathonour',\n",
              " 'careerconvos',\n",
              " 'innovative',\n",
              " 'wateringhole',\n",
              " 'cave',\n",
              " 'mountaintop',\n",
              " 'campfire',\n",
              " 'heal',\n",
              " 'altwaystoheal',\n",
              " 'healthy',\n",
              " 'peace',\n",
              " 'midweek',\n",
              " 'newmusic',\n",
              " 'watchthisspace',\n",
              " 'guitar',\n",
              " 'snapchat',\n",
              " 'redhead',\n",
              " 'vermillionred',\n",
              " 'people',\n",
              " 'goodtimes',\n",
              " 'history',\n",
              " 'summeime',\n",
              " 'memories',\n",
              " 'memories',\n",
              " 'model',\n",
              " 'hump',\n",
              " 'hump',\n",
              " 'humpers',\n",
              " 'shop',\n",
              " 'cool',\n",
              " 'home',\n",
              " 'fun',\n",
              " 'nashvilletour',\n",
              " 'nashvilleforever',\n",
              " 'eur',\n",
              " 'blog',\n",
              " 'silver',\n",
              " 'gold',\n",
              " 'forex',\n",
              " 'thankful',\n",
              " 'positive',\n",
              " 'christinagrimmie',\n",
              " 'prayfororlando',\n",
              " 'eyelids',\n",
              " 'vigilfororlando',\n",
              " 'harp',\n",
              " 'clonakilty',\n",
              " 'rip',\n",
              " 'ihavenofriends',\n",
              " 'someonecomewithme',\n",
              " 'weekend',\n",
              " 'relax',\n",
              " 'icon',\n",
              " 'woman',\n",
              " 'sundaymorning',\n",
              " 'sunday',\n",
              " 'marilynmonroe',\n",
              " 'marvel',\n",
              " 'song',\n",
              " 'musica',\n",
              " 'weed',\n",
              " 'ripchristina',\n",
              " 'adele',\n",
              " 'dance',\n",
              " 'under',\n",
              " 'blog',\n",
              " 'silver',\n",
              " 'gold',\n",
              " 'forex',\n",
              " 'healthy',\n",
              " 'altwaystoheal',\n",
              " 'model',\n",
              " 'ofw',\n",
              " 'pinoy',\n",
              " 'followme',\n",
              " 'igers',\n",
              " 'instagood',\n",
              " 'smile',\n",
              " 'love',\n",
              " 'toradora',\n",
              " 'anime',\n",
              " 'animeedit',\n",
              " 'breakups',\n",
              " 'alone',\n",
              " 'lonely',\n",
              " 'cotd',\n",
              " 'football',\n",
              " 'snapchat',\n",
              " 'fringes',\n",
              " 'qcbags',\n",
              " 'summer',\n",
              " 'nochebuena',\n",
              " 'lasvegas',\n",
              " 'usa',\n",
              " 'instaboy',\n",
              " 'instaman',\n",
              " 'sefie',\n",
              " 'septum',\n",
              " 'friend',\n",
              " 'smiles',\n",
              " 'blackandwhite',\n",
              " 'haiku',\n",
              " 'micropoetry',\n",
              " 'jewelrymaking',\n",
              " 'buttons',\n",
              " 'weston',\n",
              " 'eos',\n",
              " 'fun',\n",
              " 'cawaii',\n",
              " 'love',\n",
              " 'strawberry',\n",
              " 'tomato',\n",
              " 'boy',\n",
              " 'guy',\n",
              " 'social',\n",
              " 'analytics',\n",
              " 'photooftheday',\n",
              " 'igers',\n",
              " 'likes',\n",
              " 'doj',\n",
              " 'fbi',\n",
              " 'emailgate',\n",
              " 'hillary',\n",
              " 'shameful',\n",
              " 'disgraceful',\n",
              " 'ridiculous',\n",
              " 'stupidity',\n",
              " 'negligence',\n",
              " 'sachintendulkar',\n",
              " 'bestfriend',\n",
              " 'love',\n",
              " 'enjoy',\n",
              " 'pooh',\n",
              " 'chrisevans',\n",
              " 'bihday',\n",
              " 'florida',\n",
              " 'newalbum',\n",
              " 'indie',\n",
              " 'guitars',\n",
              " 'echobelly',\n",
              " 'tgif',\n",
              " 'webmareting',\n",
              " 'seo',\n",
              " 'community',\n",
              " 'management',\n",
              " 'weekend',\n",
              " 'nzd',\n",
              " 'blog',\n",
              " 'silver',\n",
              " 'gold',\n",
              " 'forex',\n",
              " 'bihdayweeksucks',\n",
              " 'bithday',\n",
              " 'disneysmagickingdom',\n",
              " 'disney',\n",
              " 'magickingdom',\n",
              " 'disneyland',\n",
              " 'orlando',\n",
              " 'healthy',\n",
              " 'love',\n",
              " 'commitment',\n",
              " 'trust',\n",
              " 'faithful',\n",
              " 'newarkfestival',\n",
              " 'mochithepug',\n",
              " 'puglife',\n",
              " 'justalillate',\n",
              " 'butstillontime',\n",
              " 'goodmorning',\n",
              " 'friday',\n",
              " 'girls',\n",
              " 'love',\n",
              " 'florida',\n",
              " 'aap',\n",
              " 'punjabis',\n",
              " 'drugaddicts',\n",
              " 'tracerequest',\n",
              " 'touched',\n",
              " 'guy',\n",
              " 'mato',\n",
              " 'chapones',\n",
              " 'friends',\n",
              " 'model',\n",
              " 'bloke',\n",
              " 'vfest',\n",
              " 'summer',\n",
              " 'bihday',\n",
              " 'shane',\n",
              " 'watson',\n",
              " 'australia',\n",
              " 'cricker',\n",
              " 'whoknows',\n",
              " 'radio',\n",
              " 'coldplay',\n",
              " 'gloucesterrugby',\n",
              " 'sad',\n",
              " 'together',\n",
              " 'alone',\n",
              " 'down',\n",
              " 'fine',\n",
              " 'dandy',\n",
              " 'lonely',\n",
              " 'exuberant',\n",
              " 'depressed',\n",
              " 'halffull',\n",
              " 'halfempty',\n",
              " 'mikeashley',\n",
              " 'sposdirectshame',\n",
              " 'workersrights',\n",
              " 'euref',\n",
              " 'remain',\n",
              " 'birds',\n",
              " 'stella',\n",
              " 'bad',\n",
              " 'princess',\n",
              " 'really',\n",
              " 'orlando',\n",
              " 'heabreaking',\n",
              " 'runbeck',\n",
              " 'happiness',\n",
              " 'quotes',\n",
              " 'inspirational',\n",
              " 'acne',\n",
              " 'altwaystoheal',\n",
              " 'healthy',\n",
              " 'healing',\n",
              " 'beats',\n",
              " 'makingbeats',\n",
              " 'thursday',\n",
              " 'work',\n",
              " 'istandard',\n",
              " 'akaipro',\n",
              " 'wedding',\n",
              " 'weddingpay',\n",
              " 'love',\n",
              " 'forever',\n",
              " 'weddingdress',\n",
              " 'cpd',\n",
              " 'onemoreday',\n",
              " 'twitch',\n",
              " 'stream',\n",
              " 'verbal',\n",
              " 'abuse',\n",
              " 'love',\n",
              " 'adult',\n",
              " 'teen',\n",
              " 'thankful',\n",
              " 'positive',\n",
              " 'dejeuner',\n",
              " 'lunch',\n",
              " 'happiness',\n",
              " 'love',\n",
              " 'amoureux',\n",
              " 'lawofattraction',\n",
              " 'quiz',\n",
              " 'love',\n",
              " 'happiness',\n",
              " 'motivation',\n",
              " 'success',\n",
              " 'joy',\n",
              " 'life',\n",
              " 'pole',\n",
              " 'bgp',\n",
              " 'rozthediva',\n",
              " 'blackgirlspole',\n",
              " 'bodyandpole',\n",
              " 'live',\n",
              " 'love',\n",
              " 'argentina',\n",
              " 'nohcarolina',\n",
              " 'building',\n",
              " 'ksleg',\n",
              " 'orlando',\n",
              " 'aly',\n",
              " 'cute',\n",
              " 'summer',\n",
              " 'photographerdubai',\n",
              " 'sun',\n",
              " 'hair',\n",
              " 'mydubai',\n",
              " 'positive',\n",
              " 'affirmation',\n",
              " 'thankful',\n",
              " 'positive',\n",
              " 'wimbledon',\n",
              " 'success',\n",
              " 'model',\n",
              " 'entrepreneur',\n",
              " 'speaker',\n",
              " 'fresh',\n",
              " 'confident',\n",
              " 'fashion',\n",
              " 'gala',\n",
              " 'day',\n",
              " 'kid',\n",
              " 'bipolar',\n",
              " 'frikiegirl',\n",
              " 'amazing',\n",
              " 'dads',\n",
              " 'enjoy',\n",
              " 'magnettherapy',\n",
              " 'altwaystoheal',\n",
              " 'healing',\n",
              " 'healthy',\n",
              " 'smile',\n",
              " 'egsmile',\n",
              " 'torio',\n",
              " 'bus',\n",
              " 'alamindah',\n",
              " 'white',\n",
              " 'music',\n",
              " 'carrieunderwood',\n",
              " 'model',\n",
              " 'propey',\n",
              " 'ocean',\n",
              " 'summer',\n",
              " 'life',\n",
              " 'family',\n",
              " 'quote',\n",
              " 'quotes',\n",
              " 'love',\n",
              " 'pakistan',\n",
              " 'allin',\n",
              " 'girls',\n",
              " 'boys',\n",
              " 'fashion',\n",
              " 'feelings',\n",
              " 'thankful',\n",
              " 'positive',\n",
              " 'countdown',\n",
              " 'nolefam',\n",
              " 'wakow',\n",
              " 'buzz',\n",
              " 'moment',\n",
              " 'ride',\n",
              " 'love',\n",
              " 'crush',\n",
              " 'dating',\n",
              " 'hookup',\n",
              " 'app',\n",
              " 'risay',\n",
              " 'risaypls',\n",
              " 'thursday',\n",
              " 'positive',\n",
              " 'affirmation',\n",
              " 'thankful',\n",
              " 'blessed',\n",
              " 'jeffreycwilliams',\n",
              " 'buttrue',\n",
              " 'cute',\n",
              " 'smiles',\n",
              " 'babygirl',\n",
              " 'beautiful',\n",
              " 'niece',\n",
              " 'blessed',\n",
              " 'oneteamlincoln',\n",
              " 'rockthepark',\n",
              " 'timetogetmyjesuson',\n",
              " 'happiness',\n",
              " 'sanjapan',\n",
              " 'animeconvention',\n",
              " 'tech',\n",
              " 'announcements',\n",
              " 'moto',\n",
              " 'question',\n",
              " 'mondaymotivation',\n",
              " 'livelifetothefullest',\n",
              " 'healthy',\n",
              " 'everydaycounts',\n",
              " 'classmate',\n",
              " 'friends',\n",
              " 'brentwood',\n",
              " 'homesta',\n",
              " 'kitten',\n",
              " 'cat',\n",
              " 'blackkitten',\n",
              " 'pharrellwilliams',\n",
              " 'work',\n",
              " 'gutted',\n",
              " 'rosie',\n",
              " 'fever',\n",
              " 'mad',\n",
              " 'teeth',\n",
              " 'bite',\n",
              " 'pissed',\n",
              " 'dog',\n",
              " 'biting',\n",
              " 'dogbite',\n",
              " 'dogtreat',\n",
              " 'dreamcatcher',\n",
              " 'englishteacher',\n",
              " 'teacher',\n",
              " 'ecuador',\n",
              " 'strong',\n",
              " 'greatquotes',\n",
              " 'itako',\n",
              " 'alone',\n",
              " 'it',\n",
              " 'letthembelittle',\n",
              " 'childhoodunplugged',\n",
              " 'calm',\n",
              " 'sunny',\n",
              " 'chubbygirl',\n",
              " 'glasses',\n",
              " 'finnishgirl',\n",
              " 'finn',\n",
              " 'yuhuuuuu',\n",
              " 'tma',\n",
              " 'nationalbestfriendsday',\n",
              " 'true',\n",
              " 'ugh',\n",
              " 'model',\n",
              " 'game',\n",
              " 'gaming',\n",
              " 'girlgamer',\n",
              " 'voez',\n",
              " 'weekend',\n",
              " 'beyou',\n",
              " 'ofbham',\n",
              " 'fathersday',\n",
              " 'love',\n",
              " 'positivevibes',\n",
              " 'fresh',\n",
              " 'conjuring',\n",
              " 'readyornot',\n",
              " 'truestory',\n",
              " 'iwearbanana',\n",
              " 'scared',\n",
              " 'redditchbizhour',\n",
              " 'smiles',\n",
              " 'corbinrayp',\n",
              " 'scared',\n",
              " 'missyou',\n",
              " 'whatwasthat',\n",
              " 'mondaymorning',\n",
              " 'mondaymotivation',\n",
              " 'monday',\n",
              " 'indraloka',\n",
              " 'sanasafinaz',\n",
              " 'noexchangepolicy',\n",
              " 'ending',\n",
              " 'littlebear',\n",
              " 'joy',\n",
              " 'toddlerfriends',\n",
              " 'puresweetness',\n",
              " 'latergram',\n",
              " 'toddlerfun',\n",
              " 'orlando',\n",
              " 'pharrell',\n",
              " 'real',\n",
              " 'tru',\n",
              " 'slut',\n",
              " 'snapshot',\n",
              " 'hot',\n",
              " 'nasty',\n",
              " 'naughty',\n",
              " 'sexy',\n",
              " 'horny',\n",
              " 'shy',\n",
              " 'porn',\n",
              " 'nude',\n",
              " 'kinky',\n",
              " 'xxx',\n",
              " 'thankfulthursday',\n",
              " 'positive',\n",
              " 'affirmation',\n",
              " 'canadianravers',\n",
              " 'michaelkors',\n",
              " 'luckygirl',\n",
              " 'bihday',\n",
              " 'liverpool',\n",
              " 'freakshake',\n",
              " 'freaks',\n",
              " 'yum',\n",
              " 'dalston',\n",
              " 'thankful',\n",
              " 'positive',\n",
              " 'vegan',\n",
              " 'organic',\n",
              " 'fresh',\n",
              " 'fruit',\n",
              " 'organic',\n",
              " 'healthy',\n",
              " 'healthyliving',\n",
              " 'life',\n",
              " 'sad',\n",
              " 'blackpool',\n",
              " 'fathersday',\n",
              " 'newblood',\n",
              " 'funeral',\n",
              " 'usa',\n",
              " 'stephcurry',\n",
              " 'nbafinals',\n",
              " 'grateful',\n",
              " 'affirmations',\n",
              " 'missyou',\n",
              " 'mybrotherskeeper',\n",
              " 'friday',\n",
              " 'weird',\n",
              " 'directioner',\n",
              " 'niall',\n",
              " 'nialhoranfacts',\n",
              " 'niallerwins',\n",
              " 'hot',\n",
              " 'justindrewbieber',\n",
              " 'justindb',\n",
              " 'believetou',\n",
              " 'father',\n",
              " 'sanya',\n",
              " 'whererefreshingbegins',\n",
              " 'lifeaftersurgery',\n",
              " 'dog',\n",
              " 'dogslife',\n",
              " 'labrador',\n",
              " 'labradorretriever',\n",
              " 'lifeofsam',\n",
              " 'glastofest',\n",
              " 'mep',\n",
              " 'webseries',\n",
              " 'model',\n",
              " 'juneteenth',\n",
              " 'independenceday',\n",
              " 'food',\n",
              " 'rich',\n",
              " 'ancestral',\n",
              " 'heritage',\n",
              " 'river',\n",
              " 'pathetic',\n",
              " 'ripgop',\n",
              " 'smile',\n",
              " 'instalike',\n",
              " 'instamood',\n",
              " 'instapic',\n",
              " 'graffiti',\n",
              " 'dublin',\n",
              " 'ireland',\n",
              " 'music',\n",
              " 'vimeo',\n",
              " 'movie',\n",
              " 'video',\n",
              " 'europe',\n",
              " 'people',\n",
              " 'flow',\n",
              " 'fun',\n",
              " 'rafalwojcicki',\n",
              " 'oitnbseason',\n",
              " 'iampossible',\n",
              " 'extraordinaryladyspeaks',\n",
              " 'starawards',\n",
              " 'breakfast',\n",
              " 'sun',\n",
              " 'day',\n",
              " 'sunnyday',\n",
              " 'sun',\n",
              " 'blue',\n",
              " 'yellowjackets',\n",
              " 'neshl',\n",
              " 'bhl',\n",
              " 'hockey',\n",
              " 'tonyawards',\n",
              " 'fathers',\n",
              " 'day',\n",
              " 'country',\n",
              " 'rock',\n",
              " 'bluegrass',\n",
              " 'beatles',\n",
              " 'love',\n",
              " 'pop',\n",
              " 'romance',\n",
              " 'projects',\n",
              " 'blog',\n",
              " 'silver',\n",
              " 'gold',\n",
              " 'forex',\n",
              " 'dayseventyseven',\n",
              " 'day',\n",
              " 'happiness',\n",
              " 'love',\n",
              " 'lifequotes',\n",
              " 'life',\n",
              " 'bihday',\n",
              " 'thankful',\n",
              " 'positive',\n",
              " 'quiet',\n",
              " 'july',\n",
              " 'fireworks',\n",
              " 'paratyphoid',\n",
              " 'thevoice',\n",
              " 'stopthehate',\n",
              " 'ripchristina',\n",
              " 'enjoy',\n",
              " 'music',\n",
              " 'today',\n",
              " 'free',\n",
              " 'apps',\n",
              " 'free',\n",
              " 'music',\n",
              " 'lawofattraction',\n",
              " 'resources',\n",
              " 'healing',\n",
              " 'altwaystoheal',\n",
              " 'healthy',\n",
              " 'idwp',\n",
              " 'music',\n",
              " 'therapy',\n",
              " 'healing',\n",
              " 'altwaystoheal',\n",
              " 'healthy',\n",
              " 'salud',\n",
              " 'cheers',\n",
              " 'smile',\n",
              " 'nofilter',\n",
              " 'overwhelmed',\n",
              " 'happy',\n",
              " 'buffalo',\n",
              " 'thebachelorette',\n",
              " 'empty',\n",
              " 'nowine',\n",
              " 'good',\n",
              " 'faith',\n",
              " 'vaitacacommafiasdv',\n",
              " 'love',\n",
              " 'success',\n",
              " 'work',\n",
              " 'business',\n",
              " 'torrington',\n",
              " 'lunch',\n",
              " 'afterschool',\n",
              " 'instadaily',\n",
              " 'yummy',\n",
              " 'withmom',\n",
              " 'cycling',\n",
              " 'sunset',\n",
              " 'ride',\n",
              " 'bikes',\n",
              " 'fitness',\n",
              " 'cardio',\n",
              " 'dese',\n",
              " 'tagsforlikes',\n",
              " 'food',\n",
              " 'friends',\n",
              " 'summer',\n",
              " 'swag',\n",
              " 'quotes',\n",
              " 'love',\n",
              " 'god',\n",
              " 'girl',\n",
              " 'weekend',\n",
              " 'polaroid',\n",
              " 'followme',\n",
              " 'teen',\n",
              " 'win',\n",
              " 'job',\n",
              " 'payintheusa',\n",
              " 'stellar',\n",
              " 'girls',\n",
              " 'dreamy',\n",
              " 'goodmorning',\n",
              " 'yay',\n",
              " 'wednesdaywisdom',\n",
              " 'forever',\n",
              " 'bee',\n",
              " 'beautiful',\n",
              " 'smooth',\n",
              " 'lifestyle',\n",
              " 'skin',\n",
              " 'instasize',\n",
              " 'fashion',\n",
              " 'lawofattraction',\n",
              " 'healing',\n",
              " 'loa',\n",
              " 'healthy',\n",
              " 'well',\n",
              " 'idwp',\n",
              " 'oil',\n",
              " 'blog',\n",
              " 'silver',\n",
              " 'gold',\n",
              " 'forex',\n",
              " 'newblood',\n",
              " 'first',\n",
              " 'bihday',\n",
              " 'puppy',\n",
              " 'eloise',\n",
              " 'sweetbabins',\n",
              " 'dog',\n",
              " 'growingup',\n",
              " 'cute',\n",
              " 'bihdaygirl',\n",
              " 'prayfororlando',\n",
              " 'guncontrol',\n",
              " 'smile',\n",
              " 'lovethem',\n",
              " 'ombre',\n",
              " 'blue',\n",
              " 'warcraft',\n",
              " 'family',\n",
              " 'fun',\n",
              " 'lover',\n",
              " 'friend',\n",
              " 'astrologer',\n",
              " 'love',\n",
              " 'sdl',\n",
              " 'summev',\n",
              " 'zoo',\n",
              " 'heal',\n",
              " 'altwaystoheal',\n",
              " 'healthy',\n",
              " 'roar',\n",
              " 'tiger',\n",
              " 'annaswelshzoo',\n",
              " 'bihdaycelebrations',\n",
              " 'laugh',\n",
              " 'xtra',\n",
              " 'positivevibes',\n",
              " 'sunshine',\n",
              " 'sunday',\n",
              " 'masterkeyexperience',\n",
              " 'face',\n",
              " 'pizza',\n",
              " 'sisteradventures',\n",
              " 'sister',\n",
              " 'ilovemysister',\n",
              " 'usn',\n",
              " 'navy',\n",
              " 'euros',\n",
              " 'happiness',\n",
              " 'minions',\n",
              " 'bethesda',\n",
              " 'tiggy',\n",
              " 'jax',\n",
              " 'soa',\n",
              " 'throwbackthursday',\n",
              " 'eurogamer',\n",
              " 'pumped',\n",
              " 'eurogamer',\n",
              " 'staytuned',\n",
              " 'tapfoags',\n",
              " 'sun',\n",
              " 'love',\n",
              " 'outdoors',\n",
              " 'picnic',\n",
              " 'summer',\n",
              " 'family',\n",
              " 'daughter',\n",
              " 'father',\n",
              " 'desse',\n",
              " 'icecream',\n",
              " 'retailtherapy',\n",
              " 'riverisland',\n",
              " 'shoppingqueen',\n",
              " 'alwayscheersyouup',\n",
              " 'cleaning',\n",
              " 'laundryday',\n",
              " 'ebay',\n",
              " 'woohoo',\n",
              " 'sell',\n",
              " 'selling',\n",
              " 'buy',\n",
              " 'shop',\n",
              " 'shopping',\n",
              " 'thankful',\n",
              " 'positive',\n",
              " 'chilled',\n",
              " 'instagood',\n",
              " 'idola',\n",
              " 'idol',\n",
              " 'followme',\n",
              " 'selfie',\n",
              " 'christinagrimmie',\n",
              " 'orlando',\n",
              " 'america',\n",
              " 'brexit',\n",
              " 'blog',\n",
              " 'silver',\n",
              " 'gold',\n",
              " 'eacbpm',\n",
              " 'busy',\n",
              " 'alohabeachbus',\n",
              " 'hawaii',\n",
              " 'explore',\n",
              " 'great',\n",
              " 'birds',\n",
              " 'download',\n",
              " 'film',\n",
              " 'ita',\n",
              " 'sunday',\n",
              " 'photo',\n",
              " 'model',\n",
              " 'urbex',\n",
              " 'topless',\n",
              " 'tits',\n",
              " 'mono',\n",
              " 'retweet',\n",
              " 'sexy',\n",
              " 'heels',\n",
              " 'ace',\n",
              " 'shegotmarried',\n",
              " 'model',\n",
              " 'soccer',\n",
              " 'spring',\n",
              " 'season',\n",
              " 'sun',\n",
              " 'fun',\n",
              " 'beachpark',\n",
              " 'euros',\n",
              " 'anime',\n",
              " 'love',\n",
              " 'story',\n",
              " 'not',\n",
              " 'ending',\n",
              " 'like',\n",
              " 'poet',\n",
              " 'positive',\n",
              " 'affirmation',\n",
              " 'kpop',\n",
              " 'essentialoils',\n",
              " 'anxiety',\n",
              " 'healthy',\n",
              " 'peace',\n",
              " 'altwaystoheal',\n",
              " 'gettingold',\n",
              " 'becomingboring',\n",
              " 'notborderlands',\n",
              " 'goblizzard',\n",
              " 'fatkidinacandystore',\n",
              " 'snapshot',\n",
              " 'young',\n",
              " 'shy',\n",
              " 'kinky',\n",
              " 'wet',\n",
              " 'porn',\n",
              " 'hot',\n",
              " 'xxx',\n",
              " 'horny',\n",
              " 'love',\n",
              " 'girl',\n",
              " 'snapchat',\n",
              " 'flowers',\n",
              " 'instasmile',\n",
              " 'instalove',\n",
              " 'positive',\n",
              " ...]"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ],
      "source": [
        "positive_hastags_unnested = sum(positive_hashTags,[])\n",
        "positive_hastags_unnested"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZOmobHCjMtFx"
      },
      "source": [
        "#### Now storing the negative hastags:\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {
        "scrolled": true,
        "id": "z2eqp2AyMtFx"
      },
      "outputs": [],
      "source": [
        "negative_hashtags = extractHashtags(combined_data['Cleaned_Tweets'][combined_data['label'] == 1])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {
        "scrolled": true,
        "id": "jAy1fqjuMtFy",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6eb8c952-86ad-447f-bcfc-f1ff48c0226b"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['cnn',\n",
              " 'michigan',\n",
              " 'tcot',\n",
              " 'australia',\n",
              " 'opkillingbay',\n",
              " 'seashepherd',\n",
              " 'helpcovedolphins',\n",
              " 'thecove',\n",
              " 'helpcovedolphins',\n",
              " 'neverump',\n",
              " 'xenophobia',\n",
              " 'love',\n",
              " 'peace',\n",
              " 'race',\n",
              " 'identity',\n",
              " 'med',\n",
              " 'altright',\n",
              " 'whitesupremacy',\n",
              " 'linguistics',\n",
              " 'race',\n",
              " 'power',\n",
              " 'raciolinguistics',\n",
              " 'brexit',\n",
              " 'people',\n",
              " 'trump',\n",
              " 'republican',\n",
              " 'michelleobama',\n",
              " 'knicks',\n",
              " 'golf',\n",
              " 'jewishsupremacist',\n",
              " 'libtard',\n",
              " 'sjw',\n",
              " 'liberal',\n",
              " 'politics',\n",
              " 'trash',\n",
              " 'hate',\n",
              " 'stereotyping',\n",
              " 'prejudice',\n",
              " 'hope',\n",
              " 'hate',\n",
              " 'conflict',\n",
              " 'pols',\n",
              " 'bluelivesmatter',\n",
              " 'draintheswamp',\n",
              " 'ferguson',\n",
              " 'antisemitism',\n",
              " 'hocoschools',\n",
              " 'columbiamd',\n",
              " 'hocomd',\n",
              " 'nazi',\n",
              " 'hatred',\n",
              " 'bigotry',\n",
              " 'libtard',\n",
              " 'sjw',\n",
              " 'liberal',\n",
              " 'politics',\n",
              " 'fyi',\n",
              " 'tcot',\n",
              " 'topoli',\n",
              " 'blacklivesmatter',\n",
              " 'ushistory',\n",
              " 'eugenics',\n",
              " 'biherism',\n",
              " 'bigotry',\n",
              " 'altright',\n",
              " 'potus',\n",
              " 'theresistance',\n",
              " 'crime',\n",
              " 'officer',\n",
              " 'black',\n",
              " 'retweet',\n",
              " 'tampa',\n",
              " 'miami',\n",
              " 'allahsoil',\n",
              " 'praised',\n",
              " 'cleveland',\n",
              " 'rnc',\n",
              " 'white',\n",
              " 'tamirrice',\n",
              " 'rip',\n",
              " 'bigot',\n",
              " 'blacklivesmatter',\n",
              " 'feminismiscancer',\n",
              " 'feminismisterrorism',\n",
              " 'feminismmuktbharat',\n",
              " 'malevote',\n",
              " 'prowar',\n",
              " 'anti',\n",
              " 'islamic',\n",
              " 'homophobic',\n",
              " 'rapist',\n",
              " 'hypocrite',\n",
              " 'latesnews',\n",
              " 'libtard',\n",
              " 'sjw',\n",
              " 'liberal',\n",
              " 'politics',\n",
              " 'trump',\n",
              " 'dumptrump',\n",
              " 'lifelessons',\n",
              " 'blogpost',\n",
              " 'whitepeople',\n",
              " 'respect',\n",
              " 'fakenewsale',\n",
              " 'hate',\n",
              " 'trump',\n",
              " 'hate',\n",
              " 'putin',\n",
              " 'trump',\n",
              " 'starspangledbanner',\n",
              " 'slavery',\n",
              " 'apaheid',\n",
              " 'usa',\n",
              " 'social',\n",
              " 'media',\n",
              " 'aande',\n",
              " 'eod',\n",
              " 'trump',\n",
              " 'vile',\n",
              " 'bigoted',\n",
              " 'his',\n",
              " 'surrogate',\n",
              " 'carlpaladino',\n",
              " 'endhate',\n",
              " 'allahsoil',\n",
              " 'discrimination',\n",
              " 'endthenation',\n",
              " 'misogyny',\n",
              " 'homophobia',\n",
              " 'bigotry',\n",
              " 'rushlimbaugh',\n",
              " 'trumpusa',\n",
              " 'homophobic',\n",
              " 'misogynist',\n",
              " 'sjw',\n",
              " 'hope',\n",
              " 'newyear',\n",
              " 'endof',\n",
              " 'tedtalks',\n",
              " 'tedatibm',\n",
              " 'cspan',\n",
              " 'people',\n",
              " 'trump',\n",
              " 'republican',\n",
              " 'opinion',\n",
              " 'degrading',\n",
              " 'discrimination',\n",
              " 'violence',\n",
              " 'stopracism',\n",
              " 'allahsoil',\n",
              " 'isis',\n",
              " 'islam',\n",
              " 'terrorists',\n",
              " 'gwot',\n",
              " 'tuckercarlson',\n",
              " 'oppressed',\n",
              " 'oppressors',\n",
              " 'privileged',\n",
              " 'space',\n",
              " 'ivankatrump',\n",
              " 'fake',\n",
              " 'adamsaleh',\n",
              " 'zionazi',\n",
              " 'lbgt',\n",
              " 'trump',\n",
              " 'barackobama',\n",
              " 'michelleobama',\n",
              " 'quebec',\n",
              " 'humanrights',\n",
              " 'justice',\n",
              " 'berlin',\n",
              " 'returnmyvinyl',\n",
              " 'chrismukkah',\n",
              " 'keyboard',\n",
              " 'bigot',\n",
              " 'misogynist',\n",
              " 'keepyoureyesontheprize',\n",
              " 'blacks',\n",
              " 'africanamerican',\n",
              " 'reparations',\n",
              " 'potus',\n",
              " 'trump',\n",
              " 'israel',\n",
              " 'happynewyear',\n",
              " 'decolonization',\n",
              " 'america',\n",
              " 'treasonoustrump',\n",
              " 'whiteisis',\n",
              " 'terrorism',\n",
              " 'ellen',\n",
              " 'kimburrell',\n",
              " 'newyear',\n",
              " 'prez',\n",
              " 'destruction',\n",
              " 'commercials',\n",
              " 'poopin',\n",
              " 'shuckin',\n",
              " 'democraticpay',\n",
              " 'hitler',\n",
              " 'traitor',\n",
              " 'trump',\n",
              " 'liberals',\n",
              " 'birdsofafeather',\n",
              " 'resist',\n",
              " 'versace',\n",
              " 'rich',\n",
              " 'white',\n",
              " 'snobs',\n",
              " 'tcot',\n",
              " 'tpc',\n",
              " 'joke',\n",
              " 'feminismiscancer',\n",
              " 'feminismisterrorism',\n",
              " 'feminismmuktbharat',\n",
              " 'malevote',\n",
              " 'tyler',\n",
              " 'perry',\n",
              " 'claims',\n",
              " 'reverse',\n",
              " 'critics',\n",
              " 'hypocrite',\n",
              " 'liar',\n",
              " 'inhumane',\n",
              " 'psa',\n",
              " 'sikh',\n",
              " 'temple',\n",
              " 'calgary',\n",
              " 'wso',\n",
              " 'allahsoil',\n",
              " 'emiratis',\n",
              " 'mentalhealth',\n",
              " 'firstnations',\n",
              " 'thirdworldcanada',\n",
              " 'democraticpay',\n",
              " 'blm',\n",
              " 'chicago',\n",
              " 'detroit',\n",
              " 'inn',\n",
              " 'new',\n",
              " 'phillysuppophilly',\n",
              " 'allahsoil',\n",
              " 'illegals',\n",
              " 'criminals',\n",
              " 'commonsense',\n",
              " 'deviant',\n",
              " 'barackobama',\n",
              " 'feminist',\n",
              " 'reproductiverights',\n",
              " 'bihcontrol',\n",
              " 'libtard',\n",
              " 'sjw',\n",
              " 'liberal',\n",
              " 'politics',\n",
              " 'hillaryclinton',\n",
              " 'homophobic',\n",
              " 'misogynist',\n",
              " 'newyearseve',\n",
              " 'resolutions',\n",
              " 'domesticviolence',\n",
              " 'love',\n",
              " 'japan',\n",
              " 'fascism',\n",
              " 'guardian',\n",
              " 'nytimes',\n",
              " 'bbc',\n",
              " 'afp',\n",
              " 'rsf',\n",
              " 'altright',\n",
              " 'maga',\n",
              " 'fear',\n",
              " 'black',\n",
              " 'retweet',\n",
              " 'tampa',\n",
              " 'miami',\n",
              " 'libtard',\n",
              " 'sjw',\n",
              " 'liberal',\n",
              " 'politics',\n",
              " 'yehtut',\n",
              " 'rohingya',\n",
              " 'dvbmultimediagroup',\n",
              " 'yehtut',\n",
              " 'gop',\n",
              " 'hrc',\n",
              " 'popularvote',\n",
              " 'trump',\n",
              " 'electoralcollege',\n",
              " 'trump',\n",
              " 'notmypresident',\n",
              " 'newswithed',\n",
              " 'genocide',\n",
              " 'lgbtq',\n",
              " 'arabs',\n",
              " 'god',\n",
              " 'cnn',\n",
              " 'foxnews',\n",
              " 'christians',\n",
              " 'conservative',\n",
              " 'christ',\n",
              " 'censorship',\n",
              " 'freethenipple',\n",
              " 'bully',\n",
              " 'allahsoil',\n",
              " 'grandmother',\n",
              " 'grandsons',\n",
              " 'exist',\n",
              " 'already',\n",
              " 'libtard',\n",
              " 'sjw',\n",
              " 'liberal',\n",
              " 'politics',\n",
              " 'blackwomen',\n",
              " 'asianmen',\n",
              " 'datingapps',\n",
              " 'antiracism',\n",
              " 'seashepherd',\n",
              " 'deploraball',\n",
              " 'whitesheet',\n",
              " 'inbred',\n",
              " 'canucks',\n",
              " 'oiler',\n",
              " 'americans',\n",
              " 'bigotry',\n",
              " 'hatred',\n",
              " 'homophobic',\n",
              " 'warmonger',\n",
              " 'worlddanger',\n",
              " 'trumpsamerica',\n",
              " 'hateful',\n",
              " 'america',\n",
              " 'controversy',\n",
              " 'equality',\n",
              " 'kaepernick',\n",
              " 'nationalanthem',\n",
              " 'laurenduca',\n",
              " 'hispanic',\n",
              " 'black',\n",
              " 'asian',\n",
              " 'cnn',\n",
              " 'hispanic',\n",
              " 'retweet',\n",
              " 'boricua',\n",
              " 'miami',\n",
              " 'hatred',\n",
              " 'xenophobia',\n",
              " 'islamophobia',\n",
              " 'antisemitism',\n",
              " 'war',\n",
              " 'antiracism',\n",
              " 'seashepherd',\n",
              " 'politics',\n",
              " 'relationships',\n",
              " 'new',\n",
              " 'santa',\n",
              " 'obama',\n",
              " 'soros',\n",
              " 'allahsoil',\n",
              " 'teambts',\n",
              " 'teamsuperjunior',\n",
              " 'blackonblack',\n",
              " 'ris',\n",
              " 'antiblackness',\n",
              " 'dogwhistle',\n",
              " 'blacklivesmatter',\n",
              " 'hamzayusuf',\n",
              " 'zionazis',\n",
              " 'antisemtism',\n",
              " 'womenwednesday',\n",
              " 'dystopian',\n",
              " 'radicalisation',\n",
              " 'revenge',\n",
              " 'preorder',\n",
              " 'fascism',\n",
              " 'nazi',\n",
              " 'altright',\n",
              " 'richardspencer',\n",
              " 'trumpism',\n",
              " 'trump',\n",
              " 'michelleobama',\n",
              " 'womensmarch',\n",
              " 'women',\n",
              " 'predator',\n",
              " 'sameshitnewyear',\n",
              " 'corruption',\n",
              " 'trump',\n",
              " 'terrorattack',\n",
              " 'fundamentalism',\n",
              " 'violence',\n",
              " 'isis',\n",
              " 'crisis',\n",
              " 'hatred',\n",
              " 'murder',\n",
              " 'terrorism',\n",
              " 'bigoted',\n",
              " 'libtard',\n",
              " 'sjw',\n",
              " 'liberal',\n",
              " 'politics',\n",
              " 'america',\n",
              " 'americans',\n",
              " 'altright',\n",
              " 'whitesupremacy',\n",
              " 'new',\n",
              " 'phillysuppophilly',\n",
              " 'democrat',\n",
              " 'europe',\n",
              " 'nyt',\n",
              " 'libcrib',\n",
              " 'uniteblue',\n",
              " 'fascism',\n",
              " 'trump',\n",
              " 'fear',\n",
              " 'ignorance',\n",
              " 'hate',\n",
              " 'misogyny',\n",
              " 'aloha',\n",
              " 'fascism',\n",
              " 'warsforoil',\n",
              " 'antiracism',\n",
              " 'seashepherd',\n",
              " 'theresamay',\n",
              " 'brexit',\n",
              " 'remainers',\n",
              " 'nyc',\n",
              " 'assault',\n",
              " 'womenonly',\n",
              " 'forher',\n",
              " 'newyears',\n",
              " 'resolution',\n",
              " 'womenissues',\n",
              " 'texas',\n",
              " 'justicereform',\n",
              " 'maddow',\n",
              " 'libtard',\n",
              " 'sjw',\n",
              " 'liberal',\n",
              " 'politics',\n",
              " 'chepstow',\n",
              " 'gwent',\n",
              " 'wales',\n",
              " 'cymru',\n",
              " 'familycircus',\n",
              " 'chri',\n",
              " 'christians',\n",
              " 'retweet',\n",
              " 'trump',\n",
              " 'libtard',\n",
              " 'sjw',\n",
              " 'liberal',\n",
              " 'politics',\n",
              " 'libtard',\n",
              " 'sjw',\n",
              " 'liberal',\n",
              " 'politics',\n",
              " 'childfree',\n",
              " 'economicapahied',\n",
              " 'hatespeech',\n",
              " 'assholes',\n",
              " 'rapists',\n",
              " 'pedophiles',\n",
              " 'evil',\n",
              " 'satanists',\n",
              " 'stop',\n",
              " 'joke',\n",
              " 'feminismiscancer',\n",
              " 'feminismisterrorism',\n",
              " 'feminismmuktbharat',\n",
              " 'malevote',\n",
              " 'corruptgop',\n",
              " 'nyc',\n",
              " 'newyork',\n",
              " 'women',\n",
              " 'men',\n",
              " 'bigots',\n",
              " 'carlpalladino',\n",
              " 'michelleobama',\n",
              " 'allahsoil',\n",
              " 'politicalmillennial',\n",
              " 'letstalkabout',\n",
              " 'climatechange',\n",
              " 'education',\n",
              " 'notmypresidnet',\n",
              " 'americans',\n",
              " 'bigotry',\n",
              " 'hatred',\n",
              " 'america',\n",
              " 'controversy',\n",
              " 'equality',\n",
              " 'kaepernick',\n",
              " 'nationala',\n",
              " 'israeli',\n",
              " 'jewish',\n",
              " 'judea',\n",
              " 'samaria',\n",
              " 'gop',\n",
              " 'deplorable',\n",
              " 'notfunny',\n",
              " 'swamp',\n",
              " 'dems',\n",
              " 'taxpayer',\n",
              " 'islamicterrorist',\n",
              " 'libtard',\n",
              " 'sjw',\n",
              " 'liberal',\n",
              " 'politics',\n",
              " 'alexpascal',\n",
              " 'friend',\n",
              " 'music',\n",
              " 'falsenarrative',\n",
              " 'falseequavalency',\n",
              " 'podcast',\n",
              " 'guns',\n",
              " 'igmilitia',\n",
              " 'pewpewlife',\n",
              " 'bigotry',\n",
              " 'antiracism',\n",
              " 'seashepherd',\n",
              " 'obama',\n",
              " 'communism',\n",
              " 'islam',\n",
              " 'race',\n",
              " 'nazi',\n",
              " 'muslim',\n",
              " 'science',\n",
              " 'medicine',\n",
              " 'love',\n",
              " 'notmypresident',\n",
              " 'resist',\n",
              " 'change',\n",
              " 'antiracism',\n",
              " 'neverump',\n",
              " 'pussygrabberinchief',\n",
              " 'idiocracy',\n",
              " 'gtfoh',\n",
              " 'crackalogic',\n",
              " 'allahsoil',\n",
              " 'men',\n",
              " 'harassment',\n",
              " 'verbalassault',\n",
              " 'police',\n",
              " 'checkcashing',\n",
              " 'atlanta',\n",
              " 'blackmen',\n",
              " 'profiling',\n",
              " 'equality',\n",
              " 'diversity',\n",
              " 'buffalo',\n",
              " 'resignation',\n",
              " 'obamas',\n",
              " 'carlpaladino',\n",
              " 'newyork',\n",
              " 'malvern',\n",
              " 'arkansas',\n",
              " 'nigelfarage',\n",
              " 'immigration',\n",
              " 'sulfur',\n",
              " 'trump',\n",
              " 'sisterinlaw',\n",
              " 'frustrated',\n",
              " 'idiots',\n",
              " 'mexicans',\n",
              " 'lmao',\n",
              " 'mcconnell',\n",
              " 'obama',\n",
              " 'jews',\n",
              " 'libtard',\n",
              " 'truth',\n",
              " 'police',\n",
              " 'maga',\n",
              " 'audiblechannels',\n",
              " 'trump',\n",
              " 'whitesupremacy',\n",
              " 'fakenews',\n",
              " 'america',\n",
              " 'col',\n",
              " 'blm',\n",
              " 'eugenics',\n",
              " 'southafrica',\n",
              " 'leadership',\n",
              " 'transformation',\n",
              " 'inequality',\n",
              " 'hispanic',\n",
              " 'retweet',\n",
              " 'boricua',\n",
              " 'theresistance',\n",
              " 'resistance',\n",
              " 'resist',\n",
              " 'maga',\n",
              " 'altright',\n",
              " 'sikh',\n",
              " 'temple',\n",
              " 'calgary',\n",
              " 'wso',\n",
              " 'treason',\n",
              " 'aidingenemies',\n",
              " 'fraud',\n",
              " 'coverups',\n",
              " 'benghazi',\n",
              " 'extoion',\n",
              " 'israel',\n",
              " 'notmypres',\n",
              " 'wtf',\n",
              " 'neverump',\n",
              " 'unpresidented',\n",
              " 'bigot',\n",
              " 'allahsoil',\n",
              " 'teambts',\n",
              " 'carl',\n",
              " 'paladino',\n",
              " 'michelle',\n",
              " 'obama',\n",
              " 'live',\n",
              " 'gorilla',\n",
              " 'resign',\n",
              " 'resignation',\n",
              " 'stop',\n",
              " 'blm',\n",
              " 'wiunion',\n",
              " 'people',\n",
              " 'trump',\n",
              " 'republican',\n",
              " 'racialequity',\n",
              " 'hrc',\n",
              " 'pig',\n",
              " 'trump',\n",
              " 'adultery',\n",
              " 'incest',\n",
              " 'pedophilia',\n",
              " 'bigotry',\n",
              " 'hate',\n",
              " 'deceit',\n",
              " 'maga',\n",
              " 'notmypresident',\n",
              " 'crybully',\n",
              " 'snowflakes',\n",
              " 'diversity',\n",
              " 'humanrights',\n",
              " 'ban',\n",
              " 'saying',\n",
              " 'clothing',\n",
              " 'allahsoil',\n",
              " 'whitenationalist',\n",
              " 'notmypresident',\n",
              " 'fucktrump',\n",
              " 'lostpopularvote',\n",
              " 'americadoesntwantyou',\n",
              " 'bigot',\n",
              " 'theresistance',\n",
              " 'resistance',\n",
              " 'resist',\n",
              " 'maga',\n",
              " 'altright',\n",
              " 'dts',\n",
              " 'trump',\n",
              " 'spain',\n",
              " 'liberals',\n",
              " 'misogynist',\n",
              " 'lgbti',\n",
              " 'poc',\n",
              " 'lgbti',\n",
              " 'putinschoice',\n",
              " 'stopracism',\n",
              " 'boycott',\n",
              " 'xenophobia',\n",
              " 'rainbow',\n",
              " 'diversity',\n",
              " 'trump',\n",
              " 'obama',\n",
              " 'christmaseve',\n",
              " 'trc',\n",
              " 'indignenous',\n",
              " 'nazi',\n",
              " 'americans',\n",
              " 'bigotry',\n",
              " 'hatred',\n",
              " 'altright',\n",
              " 'feminist',\n",
              " 'muslim',\n",
              " 'feminism',\n",
              " 'equality',\n",
              " 'everyone',\n",
              " 'men',\n",
              " 'women',\n",
              " 'thegreenpalmcottage',\n",
              " 'plettenburgbay',\n",
              " 'westerncape',\n",
              " 'truth',\n",
              " 'malevote',\n",
              " 'conservative',\n",
              " 'punks',\n",
              " 'hypocrite',\n",
              " 'bluelivesmatter',\n",
              " 'allahsoil',\n",
              " 'manipur',\n",
              " 'ndtv',\n",
              " 'timenow',\n",
              " 'samachar',\n",
              " 'zeenews',\n",
              " 'dordarshan',\n",
              " 'genocide',\n",
              " 'whitepeople',\n",
              " 'hawaii',\n",
              " 'jlaw',\n",
              " 'disrespect',\n",
              " 'fakenews',\n",
              " 'fakenewsmedia',\n",
              " 'returningcitizens',\n",
              " 'race',\n",
              " 'ethnocentrism',\n",
              " 'altright',\n",
              " 'pegida',\n",
              " 'revolution',\n",
              " 'race',\n",
              " 'intersectionality',\n",
              " 'language',\n",
              " 'politics',\n",
              " 'education',\n",
              " 'corporatebs',\n",
              " 'boycottjcpenney',\n",
              " 'corruption',\n",
              " 'xenophobia',\n",
              " 'islamophobia',\n",
              " 'homophobia',\n",
              " 'resist',\n",
              " 'trump',\n",
              " 'leftist',\n",
              " 'christians',\n",
              " 'christianity',\n",
              " 'adamitv',\n",
              " 'prejudice',\n",
              " 'parenting',\n",
              " 'russia',\n",
              " 'trump',\n",
              " 'tiesto',\n",
              " 'whiteamerica',\n",
              " 'gop',\n",
              " 'communism',\n",
              " 'spirituality',\n",
              " 'libtard',\n",
              " 'sjw',\n",
              " 'liberal',\n",
              " 'politics',\n",
              " 'allahsoil',\n",
              " 'emiratis',\n",
              " 'twitte',\n",
              " 'allahsoil',\n",
              " 'islam',\n",
              " 'notmypresident',\n",
              " 'fibromyalgia',\n",
              " 'survivor',\n",
              " 'childrape',\n",
              " 'ass',\n",
              " 'hole',\n",
              " 'head',\n",
              " 'big',\n",
              " 'brain',\n",
              " 'hea',\n",
              " 'love',\n",
              " 'truth',\n",
              " 'kindness',\n",
              " 'peace',\n",
              " 'compass',\n",
              " 'black',\n",
              " 'retweet',\n",
              " 'tampa',\n",
              " 'miami',\n",
              " 'talkradio',\n",
              " 'treason',\n",
              " 'trump',\n",
              " 'makeamericagreatagain',\n",
              " 'philandocastile',\n",
              " 'trump',\n",
              " 'economy',\n",
              " 'hype',\n",
              " 'fool',\n",
              " 'idiot',\n",
              " 'politics',\n",
              " 'media',\n",
              " 'blm',\n",
              " 'brexit',\n",
              " 'trump',\n",
              " 'leadership',\n",
              " 'black',\n",
              " 'retweet',\n",
              " 'tampa',\n",
              " 'miami',\n",
              " 'whiteslavers',\n",
              " 'whiteslavery',\n",
              " 'venezuela',\n",
              " 'hispanic',\n",
              " 'retweet',\n",
              " 'boricua',\n",
              " 'libtard',\n",
              " 'sjw',\n",
              " 'liberal',\n",
              " 'politics',\n",
              " 'new',\n",
              " 'phillysuppophilly',\n",
              " 'antiracism',\n",
              " 'seashepherd',\n",
              " 'rupemurdoch',\n",
              " 'master',\n",
              " 'libtard',\n",
              " 'sjw',\n",
              " 'liberal',\n",
              " 'politics',\n",
              " 'depoation',\n",
              " 'putinschoice',\n",
              " 'putinspuppet',\n",
              " 'retweet',\n",
              " 'stone',\n",
              " 'kill',\n",
              " 'quebec',\n",
              " 'criminal',\n",
              " 'podcast',\n",
              " 'nazi',\n",
              " 'swastika',\n",
              " 'ebay',\n",
              " 'trump',\n",
              " 'donaldtrump',\n",
              " 'republic',\n",
              " 'whitepower',\n",
              " 'pig',\n",
              " 'liar',\n",
              " 'dzange',\n",
              " 'capetown',\n",
              " 'movie',\n",
              " 'indians',\n",
              " 'challenged',\n",
              " 'rewrite',\n",
              " 'trumpsamerica',\n",
              " 'feeling',\n",
              " 'empowerd',\n",
              " 'fowoh',\n",
              " 'caturday',\n",
              " 'thanks',\n",
              " 'dead',\n",
              " 'white',\n",
              " 'dudes',\n",
              " 'europe',\n",
              " 'nigga',\n",
              " 'list',\n",
              " 'rapechucktodd',\n",
              " 'iqg',\n",
              " 'people',\n",
              " 'trump',\n",
              " 'republican',\n",
              " 'allahsoil',\n",
              " 'teambts',\n",
              " 'teamsuperjunior',\n",
              " 'bluelivesmatter',\n",
              " 'woke',\n",
              " 'manspreading',\n",
              " 'ifyourenotwhiteyourenotracist',\n",
              " 'seashepherd',\n",
              " 'antiracism',\n",
              " 'bigots',\n",
              " 'doublestan',\n",
              " 'kentucky',\n",
              " 'jcpenny',\n",
              " 'mexicans',\n",
              " 'bitchesbelike',\n",
              " 'cleveland',\n",
              " 'ohio',\n",
              " 'white',\n",
              " 'brexit',\n",
              " 'littleenglander',\n",
              " 'mustread',\n",
              " 'education',\n",
              " 'stereotypes',\n",
              " 'bigot',\n",
              " 'trumpproofamerica',\n",
              " 'sikh',\n",
              " 'temple',\n",
              " 'calgary',\n",
              " 'wso',\n",
              " 'uspoli',\n",
              " 'potter',\n",
              " 'greed',\n",
              " 'lies',\n",
              " 'misogyny',\n",
              " 'fail',\n",
              " 'bigot',\n",
              " 'trump',\n",
              " 'uselections',\n",
              " 'leadership',\n",
              " 'politics',\n",
              " 'brexit',\n",
              " 'blm',\n",
              " 'climatechange',\n",
              " 'fascism',\n",
              " 'antiegalitarianism',\n",
              " 'narcissism',\n",
              " 'trump',\n",
              " 'miami',\n",
              " 'policebrutality',\n",
              " 'newswithed',\n",
              " 'trump',\n",
              " 'trump',\n",
              " 'sandniggers',\n",
              " 'uskkk',\n",
              " 'msm',\n",
              " 'media',\n",
              " 'crazybengiefbps',\n",
              " 'new',\n",
              " 'phillysuppophilly',\n",
              " 'buzzfeed',\n",
              " 'manhate',\n",
              " 'shot',\n",
              " 'disparo',\n",
              " 'trompas',\n",
              " 'trumpas',\n",
              " 'migitorio',\n",
              " 'entreteiment',\n",
              " 'hatecrime',\n",
              " 'sikh',\n",
              " 'calgary',\n",
              " 'patriotwatch',\n",
              " 'auspol',\n",
              " 'rwnj',\n",
              " 'upf',\n",
              " 'cult',\n",
              " 'cultism',\n",
              " 'projection',\n",
              " 'springst',\n",
              " 'straya',\n",
              " 'misogyny',\n",
              " 'left',\n",
              " 'hispanic',\n",
              " 'retweet',\n",
              " 'boricua',\n",
              " 'arrogant',\n",
              " 'abusive',\n",
              " 'discriminating',\n",
              " 'dutch',\n",
              " 'drs',\n",
              " 'nigger',\n",
              " 'pattismith',\n",
              " 'whiteprivilege',\n",
              " 'privilege',\n",
              " 'white',\n",
              " 'tcot',\n",
              " 'feminism',\n",
              " 'sjw',\n",
              " 'sjwlogic',\n",
              " 'joy',\n",
              " 'love',\n",
              " 'deafed',\n",
              " 'rethinkdiscipline',\n",
              " 'ableism',\n",
              " 'audism',\n",
              " 'stpp',\n",
              " 'massincarceration',\n",
              " 'deafinprison',\n",
              " 'decriminaliz',\n",
              " 'help',\n",
              " 'resign',\n",
              " 'liberal',\n",
              " 'trump',\n",
              " 'racebaiting',\n",
              " 'jacobmarley',\n",
              " 'potter',\n",
              " 'misogynist',\n",
              " 'narrow',\n",
              " 'epic',\n",
              " 'alllivesmatter',\n",
              " 'unbornlivesmatter',\n",
              " 'newyearseve',\n",
              " 'islamophobia',\n",
              " 'feminism',\n",
              " 'culturalenrichment',\n",
              " 'race',\n",
              " 'trump',\n",
              " 'childish',\n",
              " 'paisanhack',\n",
              " 'negligence',\n",
              " 'hatred',\n",
              " 'injustice',\n",
              " 'climatecrimes',\n",
              " 'ecocide',\n",
              " 'trump',\n",
              " 'crapsac',\n",
              " 'jcpenny',\n",
              " 'ranting',\n",
              " 'bigot',\n",
              " 'trumpworld',\n",
              " 'truth',\n",
              " 'reality',\n",
              " 'cologne',\n",
              " 'cambersands',\n",
              " 'lifeguards',\n",
              " 'wow',\n",
              " 'marxist',\n",
              " 'propoganda',\n",
              " 'allahsoil',\n",
              " 'teambts',\n",
              " 'mustread',\n",
              " 'education',\n",
              " 'stereotypes',\n",
              " 'bustymilf',\n",
              " ...]"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ],
      "source": [
        "negative_hashtags_unnest = (sum(negative_hashtags,[]))\n",
        "negative_hashtags_unnest"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LfqbJDNyMtFy"
      },
      "source": [
        "### Plotting Bar Plots:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "id": "qjNWeQnQMtFz",
        "outputId": "93b3b0d5-5d72-4caf-a1da-5a9adaf39ecd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "FreqDist({'love': 1596, 'positive': 880, 'smile': 581, 'healthy': 576, 'thankful': 496, 'fun': 463, 'life': 431, 'summer': 395, 'model': 365, 'cute': 365, ...})"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ],
      "source": [
        "positive_word_freq = nltk.FreqDist(positive_hastags_unnested)\n",
        "\n",
        "positive_word_freq"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {
        "id": "AJRjwJ68MtF0",
        "outputId": "20a19c29-8d3e-41bf-faf8-510bdfab1f46",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             Hashtags  Count\n",
              "0                 run     34\n",
              "1                lyft      2\n",
              "2         disapointed      1\n",
              "3          getthanked      2\n",
              "4               model    365\n",
              "...               ...    ...\n",
              "20744            kamp      1\n",
              "20745            ucsd      1\n",
              "20746  berlincitygirl      1\n",
              "20747            genf      1\n",
              "20748            bern      1\n",
              "\n",
              "[20749 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-04079739-0a4d-4ab7-8e54-667aa93a0599\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Hashtags</th>\n",
              "      <th>Count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>run</td>\n",
              "      <td>34</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>lyft</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>disapointed</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>getthanked</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>model</td>\n",
              "      <td>365</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20744</th>\n",
              "      <td>kamp</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20745</th>\n",
              "      <td>ucsd</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20746</th>\n",
              "      <td>berlincitygirl</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20747</th>\n",
              "      <td>genf</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20748</th>\n",
              "      <td>bern</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>20749 rows × 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-04079739-0a4d-4ab7-8e54-667aa93a0599')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-04079739-0a4d-4ab7-8e54-667aa93a0599 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-04079739-0a4d-4ab7-8e54-667aa93a0599');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-549e41f5-719c-43fe-aa7a-10a705a986b6\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-549e41f5-719c-43fe-aa7a-10a705a986b6')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-549e41f5-719c-43fe-aa7a-10a705a986b6 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ],
      "source": [
        "positive_df = pd.DataFrame({'Hashtags': list(positive_word_freq.keys()),'Count' : list(positive_word_freq.values())})\n",
        "positive_df"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Lyt7V6GvMtF1"
      },
      "source": [
        "#### Plotting the bar plot for 20 most frequent words:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {
        "id": "M5vLZxVDMtF1",
        "outputId": "b19803b0-6dad-46d7-e7a9-f225e4f62ccb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "positive_df_plot = positive_df.nlargest(20,columns='Count')\n",
        "\n",
        "sns.barplot(data=positive_df_plot,y='Hashtags',x='Count')\n",
        "sns.despine()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2to95QHuMtF1"
      },
      "source": [
        "#### Negative Word Frequency:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {
        "id": "Idrp_K2YMtF2",
        "outputId": "b75be071-2263-4e51-de29-0f49d315b1e6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "FreqDist({'trump': 136, 'politics': 95, 'allahsoil': 92, 'libtard': 76, 'liberal': 75, 'sjw': 74, 'retweet': 63, 'miami': 46, 'black': 44, 'hate': 33, ...})"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ],
      "source": [
        "negative_word_freq = nltk.FreqDist(negative_hashtags_unnest)\n",
        "\n",
        "negative_word_freq"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AKWNPBLGMtF2"
      },
      "source": [
        "#### Creating a dataset of the most frequent words:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {
        "id": "wvXBbHtpMtF2",
        "outputId": "6652b091-610e-4bc4-b8a4-5534a2742d7b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            Hashtags  Count\n",
              "0                cnn     10\n",
              "1           michigan      2\n",
              "2               tcot     14\n",
              "3          australia      6\n",
              "4       opkillingbay      5\n",
              "...              ...    ...\n",
              "1805  jumpedtheshark      1\n",
              "1806        freemilo      5\n",
              "1807            milo      4\n",
              "1808    mailboxpride      1\n",
              "1809     liberalisme      1\n",
              "\n",
              "[1810 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3832e00e-1250-4705-bd30-d54fd9c153c1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Hashtags</th>\n",
              "      <th>Count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>cnn</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>michigan</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>tcot</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>australia</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>opkillingbay</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1805</th>\n",
              "      <td>jumpedtheshark</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1806</th>\n",
              "      <td>freemilo</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1807</th>\n",
              "      <td>milo</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1808</th>\n",
              "      <td>mailboxpride</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1809</th>\n",
              "      <td>liberalisme</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1810 rows × 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3832e00e-1250-4705-bd30-d54fd9c153c1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3832e00e-1250-4705-bd30-d54fd9c153c1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3832e00e-1250-4705-bd30-d54fd9c153c1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f28fea26-7e07-411f-bd15-3517f7a3fdad\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f28fea26-7e07-411f-bd15-3517f7a3fdad')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f28fea26-7e07-411f-bd15-3517f7a3fdad button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ],
      "source": [
        "negative_df = pd.DataFrame({'Hashtags':list(negative_word_freq.keys()),'Count':list(negative_word_freq.values())})\n",
        "\n",
        "negative_df"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0iYes5UyMtF3"
      },
      "source": [
        "#### Plotting the bar plot for the 20 most frequent negative words:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "metadata": {
        "id": "II44oPgdMtF3",
        "outputId": "984063f1-2a7b-4b36-f33e-0680cc224609",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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li1bYu3atQgMDJSXS05ORrdu3ZCbmwtbW1vk5+ejadOm+O233+Dj41PlvUNDQ7F48eJKx0+u+x1G+vxWozJxOQkiIlK2etfjlZGRAalUinfeeafK8zt37oS3tzdsbGxgZGSEhQsXIicnp8qyBQUFuHPnDjp37iw/pq2tjY4dOyqUy8rKwujRo+Hg4AATExPY29sDQKX7enp6Kux37twZb731FiIjIwEA//vf/9CiRQv07Nmz2ucLDg5GQUGBfMvNza22LBEREamXepd46evrV3vuzJkz8PPzw4ABA3Do0CGcP38en332GYqLi9+ozkGDBuH+/fvYsmULkpKSkJSUBACV7mtoaFjp2okTJyIiIgLAs2HG8ePHQyAQVFuXUCiEiYmJwkZERESaod4lXo6OjtDX10dsbGylc6dPn0aLFi3w2WefwdPTE46Ojrh161a19xKJRLC2tkZKSor8WFlZGdLS0uT79+7dQ2ZmJhYuXIh33nkHLi4uePDgwSvH+9FHH+HWrVtYt24drl69irFjx77ytURERKRZ6t0ng/T09DB//nzMmzcPurq68Pb2xj///IMrV67A0dEROTk5iI6ORqdOnXD48GHs3bv3hfebMWMGwsLC0Lp1azg7O2P9+vV48OCBvFfKzMwMFhYW+O6772Bra4ucnBwsWLDgleM1MzPD0KFDMXfuXPTt2xfNmjV7o+cnIiIi9VXverwAICQkBJ9++ik+//xzuLi4YOTIkcjPz8d7772HWbNmISAgAO3bt8fp06cREhLywnvNnz8fo0ePhr+/P7y8vGBkZARfX1/o6ekBALS0tBAdHY1z586hbdu2mDVrFr766qvXinfChAkoLi7Gxx9/XONnJiIiIvVX795qrGvl5eVwcXHBiBEjsHTp0lq55w8//IBZs2bh77//hq6u7mtdK5FIIBKJ+FajCvCtRiIiUrZ6N9RY227duoVff/0VPj4+kEql2LBhA27evIkPP/zwje/9+PFj5OXlYcWKFZgyZcprJ13PazfWihPtiYiI1Fy9HGqsTVpaWoiIiECnTp3g7e2NS5cu4bfffoOLi8sb33vlypVwdnaGjY0NgoODayFaIiIiUmcaN9RY31QMNRYUFLDHi4iISM2pfY8XERERUX2h9nO8Gorba/9GkR4/rF2XbOc1VXUIRESk4djjRURERKQkTLyIiIiIlISJ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\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "negative_df_plot = negative_df.nlargest(20,columns='Count')\n",
        "\n",
        "sns.barplot(data=negative_df_plot,y='Hashtags',x='Count')\n",
        "sns.despine()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 35,
      "metadata": {
        "id": "5NtvKpJiMtF4",
        "outputId": "09c84fe1-b0cf-4c3e-9536-f6157514229f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       0    1    2    3    4    5    6    7    8    9    ...  990  991  992  \\\n",
              "0        0    0    0    0    0    0    0    0    0    0  ...    0    0    0   \n",
              "1        0    0    0    0    0    0    0    0    0    0  ...    0    0    0   \n",
              "2        0    0    0    0    0    0    0    0    0    0  ...    0    0    0   \n",
              "3        0    0    0    0    0    0    0    0    0    0  ...    0    0    0   \n",
              "4        0    0    0    0    0    0    0    0    0    0  ...    0    0    0   \n",
              "...    ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...   \n",
              "49154    0    0    0    0    0    0    0    0    0    0  ...    0    0    0   \n",
              "49155    0    0    0    0    0    0    0    0    0    0  ...    0    0    0   \n",
              "49156    0    0    0    0    0    0    0    0    0    0  ...    0    0    0   \n",
              "49157    0    0    0    0    0    0    0    0    0    0  ...    0    0    0   \n",
              "49158    0    0    0    0    0    0    0    0    0    0  ...    0    0    0   \n",
              "\n",
              "       993  994  995  996  997  998  999  \n",
              "0        0    0    0    0    0    0    0  \n",
              "1        0    0    0    0    0    0    0  \n",
              "2        0    0    0    0    0    0    0  \n",
              "3        0    0    0    0    0    0    0  \n",
              "4        0    0    0    0    0    0    0  \n",
              "...    ...  ...  ...  ...  ...  ...  ...  \n",
              "49154    0    0    0    0    0    0    0  \n",
              "49155    0    0    0    0    0    0    0  \n",
              "49156    0    0    0    0    0    0    0  \n",
              "49157    0    0    0    0    0    0    0  \n",
              "49158    0    0    0    0    0    0    0  \n",
              "\n",
              "[49159 rows x 1000 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f090cd01-e79b-4994-8905-c3b394f25bc2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>...</th>\n",
              "      <th>990</th>\n",
              "      <th>991</th>\n",
              "      <th>992</th>\n",
              "      <th>993</th>\n",
              "      <th>994</th>\n",
              "      <th>995</th>\n",
              "      <th>996</th>\n",
              "      <th>997</th>\n",
              "      <th>998</th>\n",
              "      <th>999</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49154</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49155</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49156</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49157</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49158</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>49159 rows × 1000 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f090cd01-e79b-4994-8905-c3b394f25bc2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f090cd01-e79b-4994-8905-c3b394f25bc2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f090cd01-e79b-4994-8905-c3b394f25bc2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-cdcfde2d-a299-46a4-86c4-2a27ab943d79\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cdcfde2d-a299-46a4-86c4-2a27ab943d79')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-cdcfde2d-a299-46a4-86c4-2a27ab943d79 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ],
      "source": [
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "\n",
        "bow_vecotrizer = CountVectorizer(max_df=0.90, min_df = 2, max_features = 1000, stop_words=\"english\")\n",
        "\n",
        "bow = bow_vecotrizer.fit_transform(combined_data['Cleaned_Tweets'])\n",
        "\n",
        "bow_df = pd.DataFrame(bow.todense())\n",
        "\n",
        "bow_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 36,
      "metadata": {
        "id": "5GPoW6abMtF5",
        "outputId": "50f0957a-8da2-43eb-9954-140a5f6f3ea7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       0    1    2    3    4    5    6    7    8    9    ...  990  991  992  \\\n",
              "0      0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  0.0  0.0   \n",
              "1      0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  0.0  0.0   \n",
              "2      0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  0.0  0.0   \n",
              "3      0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  0.0  0.0   \n",
              "4      0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  0.0  0.0   \n",
              "...    ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...   \n",
              "49154  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  0.0  0.0   \n",
              "49155  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  0.0  0.0   \n",
              "49156  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  0.0  0.0   \n",
              "49157  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  0.0  0.0   \n",
              "49158  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  0.0  0.0   \n",
              "\n",
              "       993  994  995  996  997  998  999  \n",
              "0      0.0  0.0  0.0  0.0  0.0  0.0  0.0  \n",
              "1      0.0  0.0  0.0  0.0  0.0  0.0  0.0  \n",
              "2      0.0  0.0  0.0  0.0  0.0  0.0  0.0  \n",
              "3      0.0  0.0  0.0  0.0  0.0  0.0  0.0  \n",
              "4      0.0  0.0  0.0  0.0  0.0  0.0  0.0  \n",
              "...    ...  ...  ...  ...  ...  ...  ...  \n",
              "49154  0.0  0.0  0.0  0.0  0.0  0.0  0.0  \n",
              "49155  0.0  0.0  0.0  0.0  0.0  0.0  0.0  \n",
              "49156  0.0  0.0  0.0  0.0  0.0  0.0  0.0  \n",
              "49157  0.0  0.0  0.0  0.0  0.0  0.0  0.0  \n",
              "49158  0.0  0.0  0.0  0.0  0.0  0.0  0.0  \n",
              "\n",
              "[49159 rows x 1000 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-db307f37-02b7-47a0-9731-0261a4554c0f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>...</th>\n",
              "      <th>990</th>\n",
              "      <th>991</th>\n",
              "      <th>992</th>\n",
              "      <th>993</th>\n",
              "      <th>994</th>\n",
              "      <th>995</th>\n",
              "      <th>996</th>\n",
              "      <th>997</th>\n",
              "      <th>998</th>\n",
              "      <th>999</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49154</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49155</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49156</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49157</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49158</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>49159 rows × 1000 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-db307f37-02b7-47a0-9731-0261a4554c0f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-db307f37-02b7-47a0-9731-0261a4554c0f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-db307f37-02b7-47a0-9731-0261a4554c0f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e93e5a34-88ad-4856-8bfc-ca518a6e8aa3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e93e5a34-88ad-4856-8bfc-ca518a6e8aa3')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e93e5a34-88ad-4856-8bfc-ca518a6e8aa3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ],
      "source": [
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "\n",
        "tfidf = TfidfVectorizer(max_df=0.90,min_df=2,max_features=1000,stop_words='english')\n",
        "\n",
        "tfidf_matrix = tfidf.fit_transform(combined_data['Cleaned_Tweets'])\n",
        "\n",
        "tfidf_df = pd.DataFrame(tfidf_matrix.todense())\n",
        "\n",
        "tfidf_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 37,
      "metadata": {
        "id": "X9OFWY_pMtF5",
        "outputId": "d5564efe-3f8e-4e71-8649-9c24b20a1e68",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "matrix([[0, 0, 0, ..., 0, 0, 0],\n",
              "        [0, 0, 0, ..., 0, 0, 0],\n",
              "        [0, 0, 0, ..., 0, 0, 0],\n",
              "        ...,\n",
              "        [0, 0, 0, ..., 0, 0, 0],\n",
              "        [0, 0, 0, ..., 0, 0, 0],\n",
              "        [0, 0, 0, ..., 0, 0, 0]])"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ],
      "source": [
        "train_bow = bow[:31962]\n",
        "\n",
        "train_bow.todense()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 38,
      "metadata": {
        "id": "Gx6yfKbCMtF6",
        "outputId": "4d31de73-899c-45e8-8f5c-78cf10f4ae95",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "matrix([[0., 0., 0., ..., 0., 0., 0.],\n",
              "        [0., 0., 0., ..., 0., 0., 0.],\n",
              "        [0., 0., 0., ..., 0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0., ..., 0., 0., 0.],\n",
              "        [0., 0., 0., ..., 0., 0., 0.],\n",
              "        [0., 0., 0., ..., 0., 0., 0.]])"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ],
      "source": [
        "train_tfidf_matrix = tfidf_matrix[:31962]\n",
        "\n",
        "train_tfidf_matrix.todense()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8M-feNFZMtF6"
      },
      "source": [
        "#### Splitting data into training data and test data:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 39,
      "metadata": {
        "id": "dISXd_WkMtF6"
      },
      "outputs": [],
      "source": [
        "from sklearn.model_selection import train_test_split"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4NnA8-6zMtF7"
      },
      "source": [
        "#### Bag of Words Features:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 40,
      "metadata": {
        "id": "M88r8CuEMtF7"
      },
      "outputs": [],
      "source": [
        "x_train_bow, x_valid_bow, y_train_bow, y_valid_bow = train_test_split(train_bow,train['label'],test_size=0.3,random_state=2)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0KmehpS2MtF7"
      },
      "source": [
        "#### TF-IDF Features:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 41,
      "metadata": {
        "id": "rCBm1CY2MtF7"
      },
      "outputs": [],
      "source": [
        "x_train_tfidf, x_valid_tfidf, y_train_tfidf, y_valid_tfidf = train_test_split(train_tfidf_matrix,train['label'],test_size=0.3,random_state=17)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "O_doZ_DlMtF8"
      },
      "source": [
        "### Applying ML Models:"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eNsk4UycMtF8"
      },
      "source": [
        "\n",
        "#### The model we will be using is:\n",
        "- **Logistic Regression**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 42,
      "metadata": {
        "id": "0239y8ttMtF8"
      },
      "outputs": [],
      "source": [
        "from sklearn.metrics import f1_score"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zILHmwEGMtF9"
      },
      "source": [
        "#### Logistic Regression:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 43,
      "metadata": {
        "id": "ycBI3rNAMtF9"
      },
      "outputs": [],
      "source": [
        "from sklearn.linear_model import LogisticRegression"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 44,
      "metadata": {
        "id": "4u9GHMN_MtF9"
      },
      "outputs": [],
      "source": [
        "log_Reg = LogisticRegression(random_state=0,solver='lbfgs')\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LYIZM8q7MtF-"
      },
      "source": [
        "### Fitting Bag of Words Features:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 45,
      "metadata": {
        "id": "7R2c4haXMtF-",
        "outputId": "93c299eb-54bc-4703-afa1-af3ad9693797",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression(random_state=0)"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(random_state=0)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(random_state=0)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ],
      "source": [
        "log_Reg.fit(x_train_bow,y_train_bow)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 46,
      "metadata": {
        "id": "8ck_Q9eiMtF_",
        "outputId": "6c35b8fa-fe38-42e9-8620-fe939c48e1e7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[9.44815280e-01, 5.51847201e-02],\n",
              "       [9.99328530e-01, 6.71470066e-04],\n",
              "       [9.11967594e-01, 8.80324063e-02],\n",
              "       ...,\n",
              "       [8.65906496e-01, 1.34093504e-01],\n",
              "       [9.59979980e-01, 4.00200197e-02],\n",
              "       [9.69809475e-01, 3.01905252e-02]])"
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ],
      "source": [
        "predict_bow = log_Reg.predict_proba(x_valid_bow)\n",
        "predict_bow"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8ErLckfLMtF_"
      },
      "source": [
        "#### Calculating the F1-Score:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 47,
      "metadata": {
        "id": "SoxJgjyEMtF_",
        "outputId": "1b165a6d-956c-4032-f64a-464fb78d0678",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.5315391084945332"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ],
      "source": [
        "# If prediction is more than or equal to 0.3 then 1 else 0\n",
        "prediction_int = predict_bow[:,1] >=0.3\n",
        "\n",
        "# Converting to integer type\n",
        "prediction_int = prediction_int.astype(np.int)\n",
        "prediction_int\n",
        "\n",
        "# Calculating f1 score\n",
        "log_bow = f1_score(y_valid_bow, prediction_int)\n",
        "log_bow"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Oemryh-eMtGA"
      },
      "source": [
        "### Fitting TF-IDF Features:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 48,
      "metadata": {
        "id": "3eGFjTZ-MtGA",
        "outputId": "5c3adb42-ad49-41ba-b2eb-20f6351ece12",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression(random_state=0)"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(random_state=0)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(random_state=0)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 48
        }
      ],
      "source": [
        "log_Reg.fit(x_train_tfidf,y_train_tfidf)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 49,
      "metadata": {
        "id": "Y3tgM-rXMtGA",
        "outputId": "5ac88855-4c2b-4732-babc-55fff5ea2f35",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0.98280778, 0.01719222],\n",
              "       [0.96557244, 0.03442756],\n",
              "       [0.94018158, 0.05981842],\n",
              "       ...,\n",
              "       [0.93015962, 0.06984038],\n",
              "       [0.96530026, 0.03469974],\n",
              "       [0.98787762, 0.01212238]])"
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ],
      "source": [
        "predict_tfidf = log_Reg.predict_proba(x_valid_tfidf)\n",
        "predict_tfidf"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 50,
      "metadata": {
        "id": "m84jGfCdMtGB",
        "outputId": "0181dc43-3cea-4a9b-8da2-d8b84de8d705",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.5558534405719392"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ],
      "source": [
        "prediction_int = predict_tfidf[:,1]>=0.3\n",
        "\n",
        "prediction_int = prediction_int.astype(np.int)\n",
        "prediction_int\n",
        "\n",
        "log_tfidf = f1_score(y_valid_tfidf,prediction_int)\n",
        "log_tfidf"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fpmrfRa5MtGC"
      },
      "source": [
        "### Predicting the test_data and storing it:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 51,
      "metadata": {
        "id": "KCdDBUo8MtGD"
      },
      "outputs": [],
      "source": [
        "test_tfidf = tfidf_matrix[31962:]\n",
        "test_pred = log_Reg.predict_proba(test_tfidf)\n",
        "\n",
        "test_pred_int = test_pred[:,1] >= 0.3\n",
        "test_pred_int = test_pred_int.astype(np.int)\n",
        "\n",
        "test['label'] = test_pred_int\n",
        "\n",
        "submission = test[['id','label']]\n",
        "submission.to_csv('result.csv', index=False)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PcMthzeiMtGE"
      },
      "source": [
        "## Results after prediction:\n",
        "### For a negative label : 1\n",
        "### For a positive label : 0"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 52,
      "metadata": {
        "id": "pX10dqUEMtGF",
        "outputId": "69c1e373-2ee7-4ecf-b9b3-a9cd2cd6ae90",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          id  label\n",
              "0      31963      0\n",
              "1      31964      0\n",
              "2      31965      0\n",
              "3      31966      0\n",
              "4      31967      0\n",
              "...      ...    ...\n",
              "17192  49155      1\n",
              "17193  49156      0\n",
              "17194  49157      0\n",
              "17195  49158      0\n",
              "17196  49159      0\n",
              "\n",
              "[17197 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d54b1498-2cb3-4d9e-af39-1c7a499bcba4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>label</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>31963</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>31964</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>31965</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>31966</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>31967</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17192</th>\n",
              "      <td>49155</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17193</th>\n",
              "      <td>49156</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17194</th>\n",
              "      <td>49157</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17195</th>\n",
              "      <td>49158</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17196</th>\n",
              "      <td>49159</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>17197 rows × 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d54b1498-2cb3-4d9e-af39-1c7a499bcba4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d54b1498-2cb3-4d9e-af39-1c7a499bcba4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d54b1498-2cb3-4d9e-af39-1c7a499bcba4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e364b0dd-e470-431f-aa94-dcad2cfcec83\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e364b0dd-e470-431f-aa94-dcad2cfcec83')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e364b0dd-e470-431f-aa94-dcad2cfcec83 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 52
        }
      ],
      "source": [
        "res = pd.read_csv('result.csv')\n",
        "res"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "49p2hG4oMtGG"
      },
      "source": [
        "### Summary:\n",
        "**F-1 Score of Model: 0.5315391084945332 (Bag of Words) & 0.5558534405719392 (TF-IDF) using Logistic Regression**"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3.8.0 64-bit",
      "language": "python",
      "name": "python38064bitf0f02f046c6748c3bd1f9d7f12e05bf1"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.0"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}